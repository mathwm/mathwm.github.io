<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java8（三）Lambda基础语法</title>
    <link href="/6d87eb5a.html"/>
    <url>/6d87eb5a.html</url>
    
    <content type="html"><![CDATA[<p>方法引用就是通过类名或方法名引用已经存在的方法来简化lambda表达式。那么什么时候需要用方法引用呢？如果lamdba体中的内容已经有方法实现了，我们就可以使用方法引用。</p><a id="more"></a><h2 id="一、方法引用的三种语法格式"><a href="#一、方法引用的三种语法格式" class="headerlink" title="一、方法引用的三种语法格式"></a>一、方法引用的三种语法格式</h2><h3 id="1-对象-实例方法名"><a href="#1-对象-实例方法名" class="headerlink" title="1. 对象::实例方法名"></a>1. 对象::实例方法名</h3><p>lamdba写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    Consumer&lt;String&gt; con = x -&gt; System.out.println(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法引用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    PrintStream out = System.out;<br>    Consumer&lt;String&gt; con = out::println;<br>&#125;<br></code></pre></td></tr></table></figure><p>consumer接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Consumer</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：被调用的方法的参数列表和返回值类型需要与函数式接口中抽象方法的参数列表和返回值类型要一致。</strong></p><h3 id="2-类-静态方法名"><a href="#2-类-静态方法名" class="headerlink" title="2. 类::静态方法名"></a>2. 类::静态方法名</h3><p>lamdba写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法引用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>    Comparator&lt;Integer&gt; com = Integer::compare;<br>&#125;<br></code></pre></td></tr></table></figure><p>Comparator接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Integer类部分内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (x &lt; y) ? -<span class="hljs-number">1</span> : ((x == y) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：被调用的方法的参数列表和返回值类型需要与函数式接口中抽象方法的参数列表和返回值类型要一致。</strong></p><h3 id="3-类-实例方法名"><a href="#3-类-实例方法名" class="headerlink" title="3. 类::实例方法名"></a>3. 类::实例方法名</h3><p>lamdba写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br><br>    BiPredicate&lt;String,String&gt; bp = (x,y) -&gt; x.equals(y);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法引用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>    BiPredicate&lt;String,String&gt; bp = String::equals;<br>&#125;<br></code></pre></td></tr></table></figure><p>BiPredicate接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BiPredicate</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(T t, U u)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：第一个参数是这个实例方法的调用者，第二个参数是这个实例方法的参数时，就可以使用这种语法。</strong></p><h2 id="二、构造器引用"><a href="#二、构造器引用" class="headerlink" title="二、构造器引用"></a>二、构造器引用</h2><h3 id="类-new"><a href="#类-new" class="headerlink" title="类::new"></a>类::new</h3><p>lamdba写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br>    Supplier&lt;Person&gt; supplier = ()-&gt;<span class="hljs-keyword">new</span> Person();<br>&#125;<br></code></pre></td></tr></table></figure><p>构造器引用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123;<br>    Supplier&lt;Person&gt; supplier = Person::<span class="hljs-keyword">new</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Supplier接口：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@FunctionalInterface<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Supplier</span>&lt;<span class="hljs-symbol">T</span>&gt; &#123;<br>    T <span class="hljs-keyword">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">7008474395345458049L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：person类中有两个构造器，要调用哪个构造器是函数式接口决定的，也就是Supplier接口中的get()方法是无参的，那么就调用的是person中的无参构造器。</strong></p><h2 id="三、数组引用"><a href="#三、数组引用" class="headerlink" title="三、数组引用"></a>三、数组引用</h2><h3 id="Type-new"><a href="#Type-new" class="headerlink" title="Type::new"></a>Type::new</h3><p>lamdba写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span></span>&#123;<br>    Function&lt;Integer,String[]&gt; fun = x -&gt; <span class="hljs-keyword">new</span> String[x];<br>&#125;<br></code></pre></td></tr></table></figure><p>数组引用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span></span>&#123;<br>    Function&lt;Integer, String[]&gt; fun = String[]::<span class="hljs-keyword">new</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Function接口部分内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br>    <span class="hljs-function">R <span class="hljs-title">apply</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>方法应用及构造器引用其实可以理解为lamdba的另一种表现形式</li><li>方法引用被调用的方法的参数列表和返回值类型需要与函数式接口中抽象方法的参数列表和返回值类型要一致</li><li>方法引用中使用类::实例方法的条件是第一个参数是这个实例方法的调用者，第二个参数是这个实例方法的参数</li><li>构造器引用需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表一致</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL(一)</title>
    <link href="/59631e7d.html"/>
    <url>/59631e7d.html</url>
    
    <content type="html"><![CDATA[<p>结构化查询语言（Structured Query Language）简称SQL，是一种特殊目的的编程语言，是一种数据库查询和<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/2317999">程序设计语言</a>，用于存取数据以及查询、更新和管理<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F">关系数据库系统</a>。</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基本的SQL语句包括</p><ul><li>Data manipulation language(DML)</li><li>Data definition language(DDL)</li><li>Data control language(DCL)</li><li>Transaction control</li></ul><ol><li>DML包括<strong>SELECT,INSERT,UPDATE,DELETE,MERGE</strong>语句</li><li>DDL包括<strong>CREATE,ALTER,DROP,RENAME,TRUNCATE,COMMENT</strong>语句</li><li>DCL包括<strong>GRANT,REVOKE</strong>语句</li><li>Transaction control包括<strong>COMMIT,ROLLBACK,SAVEPOINT</strong>语句</li></ol><h3 id="联机文档"><a href="#联机文档" class="headerlink" title="联机文档"></a>联机文档</h3><p>我们可以用过ORALCE的联机文档查询更详细的内容哦。</p><h3 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h3><h4 id="select-基础语法"><a href="#select-基础语法" class="headerlink" title="select 基础语法"></a>select 基础语法</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * | &#123; [<span class="hljs-keyword">DISTINCT</span>] column | expression [alias],...&#125; <span class="hljs-keyword">from</span> table;<br></code></pre></td></tr></table></figure><ul><li>SELECT identifies the columns to be displayed.</li><li>FROM identifieds the table containing those columns.</li></ul><h5 id="空值NULL"><a href="#空值NULL" class="headerlink" title="空值NULL"></a>空值NULL</h5><p>Null Values in Arithmetic Expressions</p><p>Arithmetic expressions containing a null value evaluate to null.</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> last_name,<span class="hljs-number">12</span>*salary*commission_pct <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210613121632229.png" alt="image-20210613121632229"></p><h5 id="字段的别名"><a href="#字段的别名" class="headerlink" title="字段的别名"></a>字段的别名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">AS</span> name, commission_pct comm <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> last_name  <span class="hljs-string">&quot;name&quot;</span>, salary*<span class="hljs-number">12</span> <span class="hljs-string">&quot;Annual Salary&quot;</span> <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><h5 id="DISTINCT关键字-Duplicate-Rows-deal重复行的处理"><a href="#DISTINCT关键字-Duplicate-Rows-deal重复行的处理" class="headerlink" title="DISTINCT关键字,Duplicate Rows deal重复行的处理"></a>DISTINCT关键字,Duplicate Rows deal重复行的处理</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id, XXX,XXXX <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><h5 id="Using-the-DESCRIBE-Command-使用描述命令"><a href="#Using-the-DESCRIBE-Command-使用描述命令" class="headerlink" title="Using the DESCRIBE Command,使用描述命令"></a>Using the DESCRIBE Command,使用描述命令</h5><table><thead><tr><th align="center">Operator</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">Equal to</td></tr><tr><td align="center">&gt;</td><td align="center">Greater than</td></tr><tr><td align="center">&gt;=</td><td align="center">Greater than or equal to</td></tr><tr><td align="center">&lt;</td><td align="center">Less than</td></tr><tr><td align="center">&lt;=</td><td align="center">Less than or equal to</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">Not equal to ( !=  or ^= )</td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">Between two values (inclusive)</td></tr><tr><td align="center">IN (SET)</td><td align="center">Match any of a list of values</td></tr><tr><td align="center">LIKE</td><td align="center">Math a character pattern</td></tr><tr><td align="center">IS NULL</td><td align="center">Is a null value</td></tr></tbody></table><p><img src="https://gitee.com/mathwm/picBed/raw/master/20210516084620.jpg" alt="20210516084620"><br><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085023234.png" alt="image-20210516085023234"><br><img src="https://gitee.com/mathwm/picBed/raw/master/20210516084121.jpg" alt="20210516084121"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/20210516085131.jpg" alt="20210516085131"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/20210516085313.jpg" alt="20210516085313"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085356478.png" alt="image-20210516085356478"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085428117.png" alt="image-20210516085428117"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085505727.png" alt="image-20210516085505727"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085609764.png" alt="image-20210516085609764"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085633812.png" alt="image-20210516085633812"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085747301.png" alt="image-20210516085747301"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085801083.png" alt="image-20210516085801083"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085817711.png" alt="image-20210516085817711"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085832951.png" alt="image-20210516085832951"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085845864.png" alt="image-20210516085845864"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085901603.png" alt="image-20210516085901603"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085930080.png" alt="image-20210516085930080"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516085944248.png" alt="image-20210516085944248"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090023911.png" alt="image-20210516090023911"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090045384.png" alt="image-20210516090045384"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090103769.png" alt="image-20210516090103769"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090120317.png" alt="image-20210516090120317"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090135753.png" alt="image-20210516090135753"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090148687.png" alt="image-20210516090148687"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090200837.png" alt="image-20210516090200837"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090232966.png" alt="image-20210516090232966"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090251435.png" alt="image-20210516090251435"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090304725.png" alt="image-20210516090304725"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090312854.png" alt="image-20210516090312854"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090447769.png" alt="image-20210516090447769"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090459476.png" alt="image-20210516090459476"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090510304.png" alt="image-20210516090510304"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090537285.png" alt="image-20210516090537285"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090547654.png" alt="image-20210516090547654"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090645939.png" alt="image-20210516090645939"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090718401.png" alt="image-20210516090718401"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090734551.png" alt="image-20210516090734551"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090755223.png" alt="image-20210516090755223"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090809163.png" alt="image-20210516090809163"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090823069.png" alt="image-20210516090823069"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090835263.png" alt="image-20210516090835263"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090858532.png" alt="image-20210516090858532"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516090921418.png" alt="image-20210516090921418"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091001226.png" alt="image-20210516091001226"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091014940.png" alt="image-20210516091014940"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091024788.png" alt="image-20210516091024788"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091101553.png" alt="image-20210516091101553"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091124924.png" alt="image-20210516091124924"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091136217.png" alt="image-20210516091136217"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091154502.png" alt="image-20210516091154502"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091224298.png" alt="image-20210516091224298"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091243069.png" alt="image-20210516091243069"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091325658.png" alt="image-20210516091325658"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091435071.png" alt="image-20210516091435071"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091544220.png" alt="image-20210516091544220"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091625882.png" alt="image-20210516091625882"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091804351.png" alt="image-20210516091804351"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516091939661.png" alt="image-20210516091939661"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516092001286.png" alt="image-20210516092001286"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516092024670.png" alt="image-20210516092024670"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210516092046577.png" alt="image-20210516092046577"></p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>MYSQL</tag>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8（二）Lambda基础语法</title>
    <link href="/f12a12a1.html"/>
    <url>/f12a12a1.html</url>
    
    <content type="html"><![CDATA[<p>Lambda需要函数式接口支持，Java8四大函数式接口</p><a id="more"></a><h3 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Consumer<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>接口：消费型接口：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLamba3</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        happy(<span class="hljs-number">10000</span>,(m) -&gt; System.out.println(<span class="hljs-string">&quot;KTV消费:&quot;</span> + m));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">happy</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money, Consumer&lt;Double&gt; consumer)</span> </span>&#123;<br>        consumer.accept(money);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Supplier<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span>接口：供给型接口：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;   <br>List&lt;Integer&gt; list =  getNumList(<span class="hljs-number">10</span>,() -&gt; (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">100</span>)); <br>    <span class="hljs-keyword">for</span> (Integer i:list) &#123;    <br>    System.out.println(i); <br>    &#125;<br>  &#125;<br>    <span class="hljs-comment">//产生一些整数，并放入集合中</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNumList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, Supplier&lt;Integer&gt; supplier)</span> </span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;num;i++) &#123;<br>            list.add(supplier.get());<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">Function</span>&lt;<span class="hljs-title">T</span>,<span class="hljs-title">R</span>&gt;:</span>函数型接口：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">strHandler</span><span class="hljs-params">(String str, Function&lt;String,String&gt; function)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> function.apply(str);<br>&#125; <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(strHandler(<span class="hljs-string">&quot;\t\t\t 我是帅哥&quot;</span>,(str) -&gt; str.trim()));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Predicate-接口"><a href="#Predicate-接口" class="headerlink" title="Predicate 接口"></a>Predicate 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       Predicate&lt;Integer&gt; predOdd = integer -&gt; integer % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>;<br>       System.out.println(predOdd.test(<span class="hljs-number">5</span>));<br>    <span class="hljs-comment">//控制台输出 5</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他的接口"><a href="#其他的接口" class="headerlink" title="其他的接口"></a>其他的接口</h3><p>介绍完正面这四种最基本的接口，剩余的接口就可以很容易的理解了，java8中定义了几十种的函数接口，但是剩下的接口都是上面这几种接口的变种，大多为限制参数类型，数量，下面举几个例子。</p><h3 id="类型限制接口"><a href="#类型限制接口" class="headerlink" title="类型限制接口"></a>类型限制接口</h3><ul><li>参数类型,例如<code>IntPredicate,LongPredicate, DoublePredicate</code>，这几个接口，都是在基于Predicate接口的，不同的就是他们的泛型类型分别变成了Integer,Long,Double,<code>IntConsumer,LongConsumer, DoubleConsumer</code>比如这几个,对应的就是<code>Consumer&lt;Integer&gt;,Consumer&lt;Long&gt;,Consumer&lt;Double&gt;</code>,其余的是一样的道理，就不再举例子了</li><li>返回值类型，和上面类似，只是命名的规则上多了一个To,例如<code>IntToDoubleFunction,IntToLongFunction,</code> 很明显就是对应的<code>Funtion&lt;Integer,Double&gt;</code> 与<code>Fcuntion&lt;Integer,Long&gt;</code>，其余同理，另外需要注意的是，参数限制与返回值限制的命名唯一不同就是To,简单来说,前面不带To的都是参数类型限制,带To的是返回值类型限制，对于没有参数的函数接口，那显而易见只可能是对返回值作限制。例如<code>LongFunction&lt;R&gt;</code>就相当于<code>Function&lt;Long,R&gt;</code> 而多了一个To的<code>ToLongFunction&lt;T&gt;</code>就相当于<code>Function&lt;T,Long&gt;</code>，也就是对返回值类型作了限制。</li></ul><h3 id="数量限制接口"><a href="#数量限制接口" class="headerlink" title="数量限制接口"></a>数量限制接口</h3><ul><li>有些接口需要接受两名参数,此类接口的所有名字前面都是附加上Bi,是<code>Binary</code>的缩写，开头也介绍过这个单词了，是二元的意思，例如<code>BiPredicate,BiFcuntion</code>等等,而由于java没有多返回值的设定，所以Bi指的都是参数为两个</li></ul><h3 id="Operator接口"><a href="#Operator接口" class="headerlink" title="Operator接口"></a>Operator接口</h3><ul><li>此类接口只有2个分别是<code>UnaryOperator&lt;T&gt;</code> 一元操作符接口,与<code>BinaryOperator&lt;T&gt;</code>二元操作符接口，这类接口属于Function接口的简写，他们只有一个泛型参数，意思是Funtion的参数与返回值类型相同,一般多用于操作计算，计算 a + b的BiFcuntion如果限制条件为Integer的话 往往要这么写<code>BiFunction&lt;Integer,Integer,Integer&gt;</code> 前2个泛型代表参数，最后一个代表返回值，看起来似乎是有点繁重了,这个时候就可以用<code>BinaryOperator&lt;Integer&gt;</code>来代替了。</li></ul><p>下面是各种类型的接口的示意图，相信只要真正理解了，其实问题并不大</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="函数式接口"></p><h3 id="关于lambda的限制"><a href="#关于lambda的限制" class="headerlink" title="关于lambda的限制"></a>关于lambda的限制</h3><p>Java8中的lambda表达式,并不是完全闭包，lambda表达式对值封闭，不对变量封闭。简单点来说就是局部变量在lambda表达式中如果要使用，必须是声明final类型或者是隐式的final例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;<br>Consumer&lt;Integer&gt; print = () -&gt; System.out.println(num);<br></code></pre></td></tr></table></figure><p>就是可以的,虽然num没有被声明为final，但从整体来看，他和final类型的变量的表现是一致的，可如果是这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;<br>num ++;<br>Consumer&lt;Integer&gt; print = () -&gt; System.out.println(num);<br></code></pre></td></tr></table></figure><p>则无法通过编译器，这就是对值封闭(也就是栈上的变量封闭)<br>如果上文中的num是实例变量或者是静态变量就没有这个限制。<br>看到这里，自然而然就会有疑问为什么会这样？或者说为什么要这么设计。理由有很多，例如函数的不变性，线程安全等等等，这里我给一个简单的说明</p><ul><li>为什么局部变量会有限制而静态变量和全局变量就没有限制，因为局部变量是保存在栈上的，而众所周知，栈上的变量都隐式的表现了它们仅限于它们所在的线程，而静态变量与实例变量是保存在静态区与堆中的，而这两块区域是线程共享的，所以访问并没有问题。</li><li>现在我们假设如果lambda表达式可以局部变量的情况，实例变量存储在堆中，局部变量存储在栈上，而lambda表达式是在另外一个线程中使用的，那么在访问局部变量的时候，因为线程不共享，因此lambda可能会在分配该变量的线程将这个变量收回之后，去访问该变量。所以说，Java在访问自由局部变量时，实际上是在访问它的副本，而不是访问原始变量。如果局部变量仅仅赋值一次那就没有什么区别了。</li><li>严格保证这种限制会让你的代码变得无比安全，如果你学习或了解过一些经典的函数式语言的话，就会知道不变性的重要性，这也是为什么stream流可以十分方便的改成并行流的重要原因之一。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇介绍了四大函数接口和他们引申出的各类接口，终点是对不同种类行为的封装导致了设计出不同的函数接口，另外在使用函数接口或者lambda表达式的时候，要注意lambda对值封闭这个特性。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis(二)</title>
    <link href="/d82ee921.html"/>
    <url>/d82ee921.html</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis-的配置文件"><a href="#MyBatis-的配置文件" class="headerlink" title="MyBatis 的配置文件"></a>MyBatis 的配置文件</h3><p>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（settings）和属性（properties）信息。文档的顶层结构如下： </p><a id="more"></a><p>configuration 配置</p><p>• properties 属性</p><p>• settings 设置</p><p>• typeAliases 类型命名</p><p>• typeHandlers 类型处理器</p><p>• objectFactory 对象工厂</p><p>• plugins 插件</p><p>• environments 环境</p><p>​    • environment 环境变量</p><p>​    • transactionManager 事务管理器</p><p>​    • dataSource 数据源</p><p>• databaseIdProvider 数据库厂商标识</p><p>• mappers 映射器</p><p><strong>学习XML时候配置DTD约束</strong></p><h3 id="创建mybatis-conf-xml"><a href="#创建mybatis-conf-xml" class="headerlink" title="创建mybatis-conf.xml"></a>创建mybatis-conf.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta"> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1、mybatis可以使用properties来引入外部properties配置文件的内容；</span><br><span class="hljs-comment">resource：引入类路径下的资源</span><br><span class="hljs-comment">url：引入网络路径或者磁盘路径下的资源</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">2、settings包含很多重要的设置项</span><br><span class="hljs-comment">setting:用来设置每一个设置项</span><br><span class="hljs-comment">name：设置项名</span><br><span class="hljs-comment">value：设置项取值</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名 </span><br><span class="hljs-comment">别名不区分大小写</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 1、typeAlias:为某个java类型起别名</span><br><span class="hljs-comment">type:指定要起别名的类型全类名;默认别名就是类名小写；employee</span><br><span class="hljs-comment">alias:指定新的别名</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.atguigu.mybatis.bean.Employee&quot; alias=&quot;emp&quot;/&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 2、package:为某个包下的所有类批量起别名 </span><br><span class="hljs-comment">name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。</span><br><span class="hljs-comment">environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识</span><br><span class="hljs-comment">transactionManager：事务管理器；</span><br><span class="hljs-comment">type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)</span><br><span class="hljs-comment">自定义事务管理器：实现TransactionFactory接口.type指定为全类名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">dataSource：数据源;</span><br><span class="hljs-comment">type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)</span><br><span class="hljs-comment">|POOLED(PooledDataSourceFactory)</span><br><span class="hljs-comment">|JNDI(JndiDataSourceFactory)</span><br><span class="hljs-comment">自定义数据源：实现DataSourceFactory接口，type是全类名</span><br><span class="hljs-comment"> --&gt;</span><br> <br><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;dev_mysql&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dev_mysql&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dev_oracle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;orcl.driver&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;orcl.url&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;orcl.username&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;orcl.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 5、databaseIdProvider：支持多数据库厂商的；</span><br><span class="hljs-comment"> type=&quot;DB_VENDOR&quot;：VendorDatabaseIdProvider</span><br><span class="hljs-comment"> 作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;</span><br><span class="hljs-comment"> MySQL，Oracle，SQL Server,xxxx</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">databaseIdProvider</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;DB_VENDOR&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MySQL&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Oracle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;oracle&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SQL Server&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlserver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">databaseIdProvider</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span><br><span class="hljs-comment">&lt;!-- 6、mappers：将sql映射注册到全局配置中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">mapper:注册一个sql映射 </span><br><span class="hljs-comment">注册配置文件</span><br><span class="hljs-comment">resource：引用类路径下的sql映射文件</span><br><span class="hljs-comment">mybatis/mapper/EmployeeMapper.xml</span><br><span class="hljs-comment">url：引用网路路径或者磁盘路径下的sql映射文件</span><br><span class="hljs-comment">file:///var/mappers/AuthorMapper.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注册接口</span><br><span class="hljs-comment">class：引用（注册）接口，</span><br><span class="hljs-comment">1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</span><br><span class="hljs-comment">2、没有sql映射文件，所有的sql都是利用注解写在接口上;</span><br><span class="hljs-comment">推荐：</span><br><span class="hljs-comment">比较重要的，复杂的Dao接口我们来写sql映射文件</span><br><span class="hljs-comment">不重要，简单的Dao接口为了开发快速可以使用注解；</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;mybatis/mapper/EmployeeMapper.xml&quot;/&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;mapper class=&quot;com.javacgo.mybatis.dao.EmployeeMapperAnnotation&quot;/&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 批量注册： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.javacgo.mybatis.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis(一)</title>
    <link href="/771f7243.html"/>
    <url>/771f7243.html</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis是一个半自动化的持久化层框架。"><a href="#MyBatis是一个半自动化的持久化层框架。" class="headerlink" title="MyBatis是一个半自动化的持久化层框架。"></a>MyBatis是一个半自动化的持久化层框架。</h3><p>对比其他与操作数据库方案</p><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>– SQL夹在Java代码块里，耦合度高导致硬编码内伤</p><p>– 维护不易且实际开发需求中sql是有变化，频繁修改的情况多见 </p><h4 id="Hibernate和JPA"><a href="#Hibernate和JPA" class="headerlink" title="Hibernate和JPA"></a>Hibernate和JPA</h4><p>– 长难复杂SQL，对于Hibernate而言处理也不容易</p><p>– 内部自动生产的SQL，不容易做特殊优化。</p><p>– 基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难。导致数据库性能下降。 </p><p>• 对开发人员而言，核心sql还是需要自己优化</p><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><p><strong>sql和java编码分开，功能边界清晰，一个专注业务、</strong> <strong>一个专注数据。</strong></p><p>网站：<a href="https://github.com/mybatis/mybatis-3/">https://github.com/mybatis/mybatis-3/</a></p><h3 id="开始样例"><a href="#开始样例" class="headerlink" title="开始样例"></a>开始样例</h3><p>创建mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta"> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;EmployeeMapper.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">getSqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>InputStream inputStream = Resources.getResourceAsStream(resource);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>1、接口式编程<br><span class="hljs-bullet">* </span>原生：Dao====&gt;  DaoImpl<br><span class="hljs-bullet">* </span>mybatis：Mapper====&gt;  xxMapper.xml<br><span class="hljs-bullet">* </span><br><span class="hljs-bullet">* </span>2、SqlSession代表和数据库的一次会话；用完必须关闭；<br><span class="hljs-bullet">* </span>3、SqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。<br><span class="hljs-bullet">* </span>4、mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。<br><span class="hljs-bullet">* </span>（将接口和xml进行绑定）<br><span class="hljs-bullet">* </span>EmployeeMapper empMapper =sqlSession.getMapper(EmployeeMapper.class);<br><span class="hljs-bullet">* </span>5、两个重要的配置文件：<br><span class="hljs-bullet">* </span>mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等...系统运行环境信息<br><span class="hljs-bullet">* </span>sql映射文件：保存了每一个sql语句的映射信息：将sql抽取出来。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span><br><span class="hljs-comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span><br>SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br><br>SqlSession openSession = sqlSessionFactory.openSession();<br><span class="hljs-keyword">try</span> &#123;<br>Employee employee = openSession.selectOne(<br><span class="hljs-string">&quot;com.javacgo.mybatis.EmployeeMapper.selectEmp&quot;</span>, <span class="hljs-number">1</span>);<br>System.out.println(employee);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>openSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>创建EmployeeMapper.xml</p><p>数据库和entity不对应可以取别名<strong>last_name lastName</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta"> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.javacgo.mybatis.dao.EmployeeMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">namespace:名称空间;指定为接口的全类名</span><br><span class="hljs-comment">id：唯一标识</span><br><span class="hljs-comment">resultType：返回值类型</span><br><span class="hljs-comment">#&#123;id&#125;：从传递过来的参数中取出id值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public Employee getEmpById(Integer id);</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.javacgo.mybatis.bean.Employee&quot;</span>&gt;</span><br>select id,last_name lastName,email,gender from tbl_employee where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> com.javacgo.mybatis.bean.Employee;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> Employee getEmpById(Integer id);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 1、获取sqlSessionFactory对象</span><br>SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br><span class="hljs-comment">// 2、获取sqlSession对象</span><br>SqlSession openSession = sqlSessionFactory.openSession();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 3、获取接口的实现类对象</span><br><span class="hljs-comment">//会为接口自动的创建一个代理对象，代理对象去执行增删改查方法</span><br>EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);<br>Employee employee = mapper.getEmpById(<span class="hljs-number">1</span>);<br>System.out.println(mapper.getClass());<br>System.out.println(employee);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>openSession.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SqlSession</p><p>• SqlSession 的实例<strong>不是线程安全</strong>的，因此是不能被共享的。 </p><p>• SqlSession每次<strong>使用完成后需要正确关闭</strong>，这个关闭操作是必须的</p><p>• SqlSession可以直接调用方法的id进行数据库操作，但是我们一般还是推荐使用SqlSession获取到Dao接口的代理类，执行代理对象的方法，可以更安全的进行类型检查操作</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm使用秘籍（四）vue-element-admin</title>
    <link href="/84268f9a.html"/>
    <url>/84268f9a.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、vue-element-admin"><a href="#一、vue-element-admin" class="headerlink" title="一、vue-element-admin"></a><strong>一、vue-element-admin</strong></h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a><strong>1、简介</strong></h4><p>而vue-element-admin是基于element-ui 的一套后台管理系统集成方案。</p><p><strong>功能：</strong><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/#%E5%8A%9F%E8%83%BD">https://panjiachen.github.io/vue-element-admin-site/zh/guide/#功能</a></p><p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></p><p><strong>项目在线预览：</strong><a href="https://panjiachen.gitee.io/vue-element-admin/#/login?redirect=%2Fdashboard">https://panjiachen.gitee.io/vue-element-admin</a></p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 解压压缩包</span><br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> vue-element-admin-master<br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><span class="hljs-comment"># 启动。执行后，浏览器自动弹出并访问http://localhost:9527/</span><br>npm run dev<br></code></pre></td></tr></table></figure><h3 id="二、vue-admin-template"><a href="#二、vue-admin-template" class="headerlink" title="二、vue-admin-template"></a>二、<strong>vue-admin-template</strong></h3><h4 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h4><p>vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p><p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a></p><p><strong>建议：</strong>你可以在 <code>vue-admin-template</code> 的基础上进行二次开发，把 <code>vue-element-admin</code>当做工具箱，想要什么功能或者组件就去 <code>vue-element-admin</code> 那里复制过来。</p><h4 id="2、安装-1"><a href="#2、安装-1" class="headerlink" title="2、安装"></a>2、安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 解压压缩包</span><br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> vue-admin-template-master<br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><span class="hljs-comment"># 启动。执行后，浏览器自动弹出并访问http://localhost:9528/</span><br>npm run dev<br></code></pre></td></tr></table></figure><h3 id="三、项目的创建和基本配置"><a href="#三、项目的创建和基本配置" class="headerlink" title="三、项目的创建和基本配置"></a><strong>三、项目的创建和基本配置</strong></h3><h4 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a><strong>1、创建项目</strong></h4><p>将vue-admin-template-master重命名为javacgo-admin</p><h4 id="2、修改项目信息"><a href="#2、修改项目信息" class="headerlink" title="2、修改项目信息"></a>2、修改项目信息</h4><p>package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;javacgo-admin&quot;</span>,<br>    ......<br>    &quot;description&quot;: &quot;谷粒学院后台管理系统&quot;,<br>    &quot;author&quot;: &quot;Helen &lt;javacgo@163.com&gt;&quot;,<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、如果需要修改端口号"><a href="#3、如果需要修改端口号" class="headerlink" title="3、如果需要修改端口号"></a>3、如果需要修改端口号</h4><p>config/index.js中修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">port: <span class="hljs-number">9528</span><br></code></pre></td></tr></table></figure><h4 id="4、项目的目录结构"><a href="#4、项目的目录结构" class="headerlink" title="4、项目的目录结构"></a><strong>4、项目的</strong>目录结构</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">. <br>├── build <span class="hljs-regexp">//</span> 构建脚本<br>├── config <span class="hljs-regexp">//</span> 全局配置 <br>├── node_modules <span class="hljs-regexp">//</span> 项目依赖模块<br>├── src <span class="hljs-regexp">//</span>项目源代码<br>├── static <span class="hljs-regexp">//</span> 静态资源<br>└── package.jspon <span class="hljs-regexp">//</span> 项目信息和依赖配置<br></code></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">src <br>├── api &#x2F;&#x2F; 各种接口 <br>├── assets &#x2F;&#x2F; 图片等资源 <br>├── components &#x2F;&#x2F; 各种公共组件，非公共组件在各自view下维护 <br>├── icons &#x2F;&#x2F;svg icon <br>├── router &#x2F;&#x2F; 路由表 <br>├── store &#x2F;&#x2F; 存储 <br>├── styles &#x2F;&#x2F; 各种样式 <br>├── utils &#x2F;&#x2F; 公共工具，非公共工具，在各自view下维护 <br>├── views &#x2F;&#x2F; 各种layout<br>├── App.vue &#x2F;&#x2F;***项目顶层组件*** <br>├── main.js &#x2F;&#x2F;***项目入口文件***<br>└── permission.js &#x2F;&#x2F;认证入口<br></code></pre></td></tr></table></figure><h4 id="5、运行项目"><a href="#5、运行项目" class="headerlink" title="5、运行项目"></a><strong>5、运行项目</strong></h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npm <span class="hljs-keyword">run</span><span class="bash"> dev</span><br></code></pre></td></tr></table></figure><h3 id="四、登录页修改"><a href="#四、登录页修改" class="headerlink" title="四、登录页修改"></a>四、登录页修改</h3><p>src/views/login/index.vue（登录组件）</p><p>4行</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;h3 <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">title</span>&quot;&gt;后台管理系统&lt;/<span class="hljs-symbol">h3</span>&gt;<br></code></pre></td></tr></table></figure><p>28行</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">&lt;el-button :loading=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;primary&quot;</span> style=<span class="hljs-string">&quot;width:100%;&quot;</span> <span class="hljs-meta">@click</span>.native.prevent=<span class="hljs-string">&quot;handleLogin&quot;</span>&gt;<br> 登录<br>&lt;/el-button&gt;   <br></code></pre></td></tr></table></figure><h3 id="五、页面零星修改"><a href="#五、页面零星修改" class="headerlink" title="五、页面零星修改"></a><strong>五、页面零星修改</strong></h3><h4 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a><strong>1</strong>、标题</h4><p>index.html（项目的html入口）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>后台管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改后热部署功能，浏览器自动刷新</p><h4 id="2、国际化设置"><a href="#2、国际化设置" class="headerlink" title="2、国际化设置"></a>2、国际化设置</h4><p>打开 src/main.js（项目的js入口），第7行，修改语言为 zh-CN，使用中文语言环境，例如：日期时间组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> locale <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span> <span class="hljs-comment">// lang i18n</span><br></code></pre></td></tr></table></figure><h4 id="3、icon"><a href="#3、icon" class="headerlink" title="3、icon"></a>3、icon</h4><p>复制 favicon.ico 到根目录</p><h4 id="4、导航栏文字"><a href="#4、导航栏文字" class="headerlink" title="4、导航栏文字"></a>4、导航栏文字</h4><p>src/views/layout/components（当前项目的布局组件）</p><p>src/views/layout/components/Navbar.vue</p><p>13行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;el-dropdown-item&gt;<br>    首页<br>&lt;/el-dropdown-item&gt;<br></code></pre></td></tr></table></figure><p>17行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;span style=<span class="hljs-string">&quot;display:block;&quot;</span> @click=<span class="hljs-string">&quot;logout&quot;</span>&gt;退出&lt;/span&gt;<br></code></pre></td></tr></table></figure><h4 id="5、面包屑文字"><a href="#5、面包屑文字" class="headerlink" title="5、面包屑文字"></a><strong>5、面包屑文字</strong></h4><p>src/components（可以在很多项目中复用的通用组件）</p><p>src/components/Breadcrumb/index.vue</p><p>38行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="六、Eslint语法规范型检查"><a href="#六、Eslint语法规范型检查" class="headerlink" title="六、Eslint语法规范型检查"></a>六、Eslint语法规范型检查</h3><h4 id="1、ESLint简介"><a href="#1、ESLint简介" class="headerlink" title="1、ESLint简介"></a><strong>1、ESLint简介</strong></h4><p>JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调适。</p><p>ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。让程序员在编码的过程中发现问题而不是在执行的过程中。</p><h4 id="2、语法规则"><a href="#2、语法规则" class="headerlink" title="2、语法规则"></a>2、语法规则</h4><p>ESLint 内置了一些规则，也可以在使用过程中自定义规则。</p><p>本项目的语法规则包括：两个字符缩进，必须使用单引号，不能使用双引号，语句后不可以写分号，代码段之间必须有一个空行等。</p><h4 id="3、确认开启语法检查"><a href="#3、确认开启语法检查" class="headerlink" title="3、确认开启语法检查"></a>3、确认开启语法检查</h4><p>打开 config/index.js，配置是否开启语法检查</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">useEslint:</span> <span class="hljs-literal">true</span><span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>可以关闭语法检查，建议开启，养成良好的编程习惯。</p><h4 id="4、ESLint插件安装"><a href="#4、ESLint插件安装" class="headerlink" title="4、ESLint插件安装"></a>4、ESLint插件安装</h4><p>vs code的ESLint插件，能帮助我们自动整理代码格式 </p><h4 id="5、插件的扩展设置"><a href="#5、插件的扩展设置" class="headerlink" title="5、插件的扩展设置"></a>5、插件的扩展设置</h4><p>选择vs code左下角的“设置”， 打开 VSCode 配置文件,添加如下配置</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/63891dbe-e5a2-4724-a0a3-a35987d088fc.png" alt="img"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/27c3bfeb-db13-425e-a418-360dd684f5c1.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;files.autoSave&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br><span class="hljs-string">&quot;eslint.validate&quot;</span>: [<br>  <span class="hljs-string">&quot;javascript&quot;</span>,<br>  <span class="hljs-string">&quot;javascriptreact&quot;</span>,<br>  <span class="hljs-string">&quot;vue-html&quot;</span>,<br>  &#123;<br>    <span class="hljs-string">&quot;language&quot;</span>: <span class="hljs-string">&quot;vue&quot;</span>,<br>    <span class="hljs-string">&quot;autoFix&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>],<br><span class="hljs-string">&quot;eslint.run&quot;</span>: <span class="hljs-string">&quot;onSave&quot;</span>,<br><span class="hljs-string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="七、后台系统路由实现分析"><a href="#七、后台系统路由实现分析" class="headerlink" title="七、后台系统路由实现分析"></a>七、后台系统路由实现分析</h3><h4 id="1、入口文件中调用路由"><a href="#1、入口文件中调用路由" class="headerlink" title="1、入口文件中调用路由"></a>1、入口文件中调用路由</h4><p>src/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span> <span class="hljs-comment">//引入路由模块</span><br>......<br><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router, <span class="hljs-comment">//挂载路由</span><br>  store,<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、路由模块中定义路由"><a href="#2、路由模块中定义路由" class="headerlink" title="2、路由模块中定义路由"></a>2、路由模块中定义路由</h4><p>src/router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRouterMap = [<br>  ......<br>]<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  ......<br>  routes: constantRouterMap<br>&#125;)   <br></code></pre></td></tr></table></figure><h3 id="八、路由定义"><a href="#八、路由定义" class="headerlink" title="八、路由定义"></a>八、路由定义</h3><h4 id="1、复制icon图标"><a href="#1、复制icon图标" class="headerlink" title="1、复制icon图标"></a>1、复制icon图标</h4><p>将vue-element-admin/src/icons/svg 中的图标复制到 javacgo-admin项目中</p><h4 id="2、修改路由"><a href="#2、修改路由" class="headerlink" title="2、修改路由"></a>2、修改路由</h4><p>修改 src/router/index.js 文件，重新定义constantRouterMap</p><p><strong>注意：</strong>每个路由的name不能相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRouterMap = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>), <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/404&#x27;</span>), <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-comment">// 首页</span><br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>    children: [&#123;<br>      path: <span class="hljs-string">&#x27;dashboard&#x27;</span>,<br>      component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/dashboard/index&#x27;</span>),<br>      meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;学院后台首页&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span> &#125;<br>    &#125;]<br>  &#125;,<br>  <span class="hljs-comment">// 讲师管理</span><br>  &#123;<br>    path: <span class="hljs-string">&#x27;/edu/teacher&#x27;</span>,<br>    component: Layout,<br>    redirect: <span class="hljs-string">&#x27;/edu/teacher/list&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Teacher&#x27;</span>,<br>    meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;peoples&#x27;</span> &#125;,<br>    children: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;list&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;EduTeacherList&#x27;</span>,<br>        component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/list&#x27;</span>),<br>        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师列表&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;create&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;EduTeacherCreate&#x27;</span>,<br>        component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/form&#x27;</span>),<br>        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加讲师&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;edit/:id&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;EduTeacherEdit&#x27;</span>,<br>        component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/form&#x27;</span>),<br>        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑讲师&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>        hidden: <span class="hljs-literal">true</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;<br>]<br></code></pre></td></tr></table></figure><h4 id="3、创建vue组件"><a href="#3、创建vue组件" class="headerlink" title="3、创建vue组件"></a>3、创建vue组件</h4><p>在src/views文件夹下创建以下文件夹和文件</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/105c6a93-efd3-4e7b-937a-d46c202b7084.png" alt="img"></p><h4 id="4、form-vue"><a href="#4、form-vue" class="headerlink" title="4、form.vue"></a>4、form.vue</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span><br>    讲师表单<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5、list-vue"><a href="#5、list-vue" class="headerlink" title="5、list.vue"></a>5、list.vue</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;<br>    讲师列表<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="九、分页列表"><a href="#九、分页列表" class="headerlink" title="九、分页列表"></a>九、分页列表</h3><h4 id="1、定义api"><a href="#1、定义api" class="headerlink" title="1、定义api"></a>1、定义api</h4><p>创建文件 src/api/edu/teacher.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">const</span> api_name = <span class="hljs-string">&#x27;/admin/edu/teacher&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">getPageList</span>(<span class="hljs-params">page, limit, searchObj</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      url: <span class="hljs-string">`<span class="hljs-subst">$&#123;api_name&#125;</span>/<span class="hljs-subst">$&#123;page&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>      method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>      data: searchObj<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、初始化vue组件"><a href="#2、初始化vue组件" class="headerlink" title="2、初始化vue组件"></a>2、初始化vue组件</h4><p>src/views/edu/teacher/list.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;<br>    讲师列表<br>  &lt;/div&gt;<br><br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">import</span> teacher <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/edu/teacher&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-comment">// 定义数据</span><br>      <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 当页面加载时获取数据</span><br>    <span class="hljs-built_in">this</span>.fetchData()<br>  &#125;,<br><br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 调用api层获取数据库中的数据</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加载列表&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3、定义data"><a href="#3、定义data" class="headerlink" title="3、定义data"></a><strong>3、定义data</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      listLoading: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否显示loading信息</span><br>      list: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 数据列表</span><br>      total: <span class="hljs-number">0</span>, <span class="hljs-comment">// 总记录数</span><br>      page: <span class="hljs-number">1</span>, <span class="hljs-comment">// 页码</span><br>      limit: <span class="hljs-number">10</span>, <span class="hljs-comment">// 每页记录数</span><br>      searchObj: &#123;&#125;<span class="hljs-comment">// 查询条件</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><h4 id="4、定义methods"><a href="#4、定义methods" class="headerlink" title="4、定义methods"></a>4、定义methods</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>   <span class="hljs-function"><span class="hljs-title">fetchData</span>(<span class="hljs-params">page = <span class="hljs-number">1</span></span>)</span> &#123; <span class="hljs-comment">// 调用api层获取数据库中的数据</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加载列表&#x27;</span>)<br>     <span class="hljs-built_in">this</span>.page = page<br>     <span class="hljs-built_in">this</span>.listLoading = <span class="hljs-literal">true</span><br>     teacher.getPageList(<span class="hljs-built_in">this</span>.page, <span class="hljs-built_in">this</span>.limit, <span class="hljs-built_in">this</span>.searchObj).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>       <span class="hljs-comment">// debugger 设置断点调试</span><br>       <span class="hljs-keyword">if</span> (response.success === <span class="hljs-literal">true</span>) &#123;<br>         <span class="hljs-built_in">this</span>.list = response.data.rows<br>         <span class="hljs-built_in">this</span>.total = response.data.total<br>       &#125;<br>       <span class="hljs-built_in">this</span>.listLoading = <span class="hljs-literal">false</span><br>     &#125;)<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="5、表格渲染"><a href="#5、表格渲染" class="headerlink" title="5、表格渲染"></a>5、表格渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 表格 --&gt;<br>    &lt;el-table<br>      v-loading=<span class="hljs-string">&quot;listLoading&quot;</span><br>      :data=<span class="hljs-string">&quot;list&quot;</span><br>      element-loading-text=<span class="hljs-string">&quot;数据加载中&quot;</span><br>      border<br>      fit<br>      highlight-current-row&gt;<br>      &lt;el-table-column<br>        label=<span class="hljs-string">&quot;序号&quot;</span><br>        width=<span class="hljs-string">&quot;70&quot;</span><br>        align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;template slot-scope=<span class="hljs-string">&quot;scope&quot;</span>&gt;<br>          &#123;&#123; (page - <span class="hljs-number">1</span>) * limit + scope.$index + <span class="hljs-number">1</span> &#125;&#125;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=<span class="hljs-string">&quot;name&quot;</span> label=<span class="hljs-string">&quot;名称&quot;</span> width=<span class="hljs-string">&quot;80&quot;</span> /&gt;<br>      &lt;el-table-column label=<span class="hljs-string">&quot;头衔&quot;</span> width=<span class="hljs-string">&quot;80&quot;</span>&gt;<br>        &lt;template slot-scope=<span class="hljs-string">&quot;scope&quot;</span>&gt;<br>          &#123;&#123; scope.row.level===<span class="hljs-number">1</span>?<span class="hljs-string">&#x27;高级讲师&#x27;</span>:<span class="hljs-string">&#x27;首席讲师&#x27;</span> &#125;&#125;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=<span class="hljs-string">&quot;intro&quot;</span> label=<span class="hljs-string">&quot;资历&quot;</span> /&gt;<br>      &lt;el-table-column prop=<span class="hljs-string">&quot;gmtCreate&quot;</span> label=<span class="hljs-string">&quot;添加时间&quot;</span> width=<span class="hljs-string">&quot;160&quot;</span>/&gt;<br>      &lt;el-table-column prop=<span class="hljs-string">&quot;sort&quot;</span> label=<span class="hljs-string">&quot;排序&quot;</span> width=<span class="hljs-string">&quot;60&quot;</span> /&gt;<br>      &lt;el-table-column label=<span class="hljs-string">&quot;操作&quot;</span> width=<span class="hljs-string">&quot;200&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;template slot-scope=<span class="hljs-string">&quot;scope&quot;</span>&gt;<br>          &lt;router-link :to=<span class="hljs-string">&quot;&#x27;/edu/teacher/edit/&#x27;+scope.row.id&quot;</span>&gt;<br>            &lt;el-button type=<span class="hljs-string">&quot;primary&quot;</span> size=<span class="hljs-string">&quot;mini&quot;</span> icon=<span class="hljs-string">&quot;el-icon-edit&quot;</span>&gt;修改&lt;/el-button&gt;<br>          &lt;/router-link&gt;<br>          &lt;el-button type=<span class="hljs-string">&quot;danger&quot;</span> size=<span class="hljs-string">&quot;mini&quot;</span> icon=<span class="hljs-string">&quot;el-icon-delete&quot;</span> @click=<span class="hljs-string">&quot;removeDataById(scope.row.id)&quot;</span>&gt;删除&lt;/el-button&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br></code></pre></td></tr></table></figure><h4 id="6、分页组件"><a href="#6、分页组件" class="headerlink" title="6、分页组件"></a>6、分页组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 分页 --&gt;<br> &lt;el-pagination<br>   :current-page=<span class="hljs-string">&quot;page&quot;</span><br>   :page-size=<span class="hljs-string">&quot;limit&quot;</span><br>   :total=<span class="hljs-string">&quot;total&quot;</span><br>   style=<span class="hljs-string">&quot;padding: 30px 0; text-align: center;&quot;</span><br>   layout=<span class="hljs-string">&quot;total, prev, pager, next, jumper&quot;</span><br>   @current-change=<span class="hljs-string">&quot;fetchData&quot;</span><br> /&gt;<br></code></pre></td></tr></table></figure><h4 id="7、顶部查询表单"><a href="#7、顶部查询表单" class="headerlink" title="7、顶部查询表单"></a>7、顶部查询表单</h4><p><strong>注意：</strong></p><p>element-ui的 date-picker组件默认绑定的时间值是默认世界标准时间，和中国时间差8小时</p><p>设置 value-format=”yyyy-MM-dd HH:mm:ss” 改变绑定的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--查询表单--&gt;<br>   &lt;el-form :inline=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;<br>     &lt;el-form-item&gt;<br>       &lt;el-input v-model=<span class="hljs-string">&quot;searchObj.name&quot;</span> placeholder=<span class="hljs-string">&quot;讲师名&quot;</span>/&gt;<br>     &lt;/el-form-item&gt;<br>     &lt;el-form-item&gt;<br>       &lt;el-select v-model=<span class="hljs-string">&quot;searchObj.level&quot;</span> clearable placeholder=<span class="hljs-string">&quot;讲师头衔&quot;</span>&gt;<br>         &lt;el-option :value=<span class="hljs-string">&quot;1&quot;</span> label=<span class="hljs-string">&quot;高级讲师&quot;</span>/&gt;<br>         &lt;el-option :value=<span class="hljs-string">&quot;2&quot;</span> label=<span class="hljs-string">&quot;首席讲师&quot;</span>/&gt;<br>       &lt;/el-select&gt;<br>     &lt;/el-form-item&gt;<br>     &lt;el-form-item label=<span class="hljs-string">&quot;添加时间&quot;</span>&gt;<br>       &lt;el-date-picker<br>         v-model=<span class="hljs-string">&quot;searchObj.begin&quot;</span><br>         type=<span class="hljs-string">&quot;datetime&quot;</span><br>         placeholder=<span class="hljs-string">&quot;选择开始时间&quot;</span><br>         value-format=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>         <span class="hljs-keyword">default</span>-time=<span class="hljs-string">&quot;00:00:00&quot;</span><br>       /&gt;<br>     &lt;/el-form-item&gt;<br>     &lt;el-form-item&gt;<br>       &lt;el-date-picker<br>         v-model=<span class="hljs-string">&quot;searchObj.end&quot;</span><br>         type=<span class="hljs-string">&quot;datetime&quot;</span><br>         placeholder=<span class="hljs-string">&quot;选择截止时间&quot;</span><br>         value-format=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>         <span class="hljs-keyword">default</span>-time=<span class="hljs-string">&quot;00:00:00&quot;</span><br>       /&gt;<br>     &lt;/el-form-item&gt;<br>     &lt;el-button type=<span class="hljs-string">&quot;primary&quot;</span> icon=<span class="hljs-string">&quot;el-icon-search&quot;</span> @click=<span class="hljs-string">&quot;fetchData()&quot;</span>&gt;查询&lt;/el-button&gt;<br>     &lt;el-button type=<span class="hljs-string">&quot;default&quot;</span> @click=<span class="hljs-string">&quot;resetData()&quot;</span>&gt;清空&lt;/el-button&gt;<br>   &lt;/el-form&gt;<br></code></pre></td></tr></table></figure><p>清空方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">resetData</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.searchObj = &#123;&#125;<br>    <span class="hljs-built_in">this</span>.fetchData()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h4><h3 id="十、删除"><a href="#十、删除" class="headerlink" title="十、删除"></a>十、删除</h3><h4 id="1、定义api-1"><a href="#1、定义api-1" class="headerlink" title="1、定义api"></a>1、定义api</h4><p>src/api/edu/teacher.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">removeById</span>(<span class="hljs-params">teacherId</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        url: <span class="hljs-string">`<span class="hljs-subst">$&#123;api_name&#125;</span>/<span class="hljs-subst">$&#123;teacherId&#125;</span>`</span>,<br>        method: <span class="hljs-string">&#x27;delete&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、定义methods"><a href="#2、定义methods" class="headerlink" title="2、定义methods"></a>2、定义methods</h4><p>src/views/edu/teacher/list.vue</p><p>使用MessageBox 弹框组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">removeDataById</span>(<span class="hljs-params">id</span>)</span> &#123;<br>    <span class="hljs-comment">// debugger</span><br>    <span class="hljs-comment">// console.log(memberId)</span><br>    <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&#x27;此操作将永久删除该记录, 是否继续?&#x27;</span>, <span class="hljs-string">&#x27;提示&#x27;</span>, &#123;<br>        confirmButtonText: <span class="hljs-string">&#x27;确定&#x27;</span>,<br>        cancelButtonText: <span class="hljs-string">&#x27;取消&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;warning&#x27;</span><br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> teacher.removeById(id)<br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.fetchData()<br>        <span class="hljs-built_in">this</span>.$message(&#123;<br>            type: <span class="hljs-string">&#x27;success&#x27;</span>,<br>            message: <span class="hljs-string">&#x27;删除成功!&#x27;</span><br>        &#125;)<br>    &#125;).catch(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123; <span class="hljs-comment">// 失败</span><br>        <span class="hljs-keyword">if</span> (response === <span class="hljs-string">&#x27;cancel&#x27;</span>) &#123;<br>            <span class="hljs-built_in">this</span>.$message(&#123;<br>                type: <span class="hljs-string">&#x27;info&#x27;</span>,<br>                message: <span class="hljs-string">&#x27;已取消删除&#x27;</span><br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.$message(&#123;<br>                type: <span class="hljs-string">&#x27;error&#x27;</span>,<br>                message: <span class="hljs-string">&#x27;删除失败&#x27;</span><br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm使用秘籍（三）模块化</title>
    <link href="/435ae317.html"/>
    <url>/435ae317.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、模块化简介"><a href="#一、模块化简介" class="headerlink" title="一、模块化简介"></a>一、模块化简介</h3><h4 id="1、模块化产生的背景"><a href="#1、模块化产生的背景" class="headerlink" title="1、模块化产生的背景"></a>1、模块化产生的背景</h4><p>随着网站逐渐变成”互联网应用程序”，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p><p>Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p>但是，Javascript不是一种模块化编程语言，它不支持”类”（class），包（package）等概念，更遑论”模块”（module）了。</p><h4 id="2、什么是模块化开发"><a href="#2、什么是模块化开发" class="headerlink" title="2、什么是模块化开发"></a>2、什么是模块化开发</h4><p>传统非模块化开发有如下的缺点：</p><ul><li>命名冲突</li><li>文件依赖</li></ul><p>模块化规范：</p><ul><li>CommonJS模块化规范</li><li>ES6模块化规范</li></ul><h3 id="二、CommonJS模块规范"><a href="#二、CommonJS模块规范" class="headerlink" title="二、CommonJS模块规范"></a><strong>二、CommonJS模块规范</strong></h3><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><h4 id="1、创建“module”文件夹"><a href="#1、创建“module”文件夹" class="headerlink" title="1、创建“module”文件夹"></a>1、创建“module”文件夹</h4><h4 id="2、导出模块"><a href="#2、导出模块" class="headerlink" title="2、导出模块"></a>2、导出模块</h4><p>创建 common-js模块化/四则运算.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">// 定义成员：<br>const sum = <span class="hljs-keyword">function</span>(a,b)&#123;<br>    <span class="hljs-built_in">return</span> parseInt(a) + parseInt(b)<br>&#125;<br>const subtract = <span class="hljs-keyword">function</span>(a,b)&#123;<br>    <span class="hljs-built_in">return</span> parseInt(a) - parseInt(b)<br>&#125;<br>const multiply = <span class="hljs-keyword">function</span>(a,b)&#123;<br>    <span class="hljs-built_in">return</span> parseInt(a) * parseInt(b)<br>&#125;<br>const divide = <span class="hljs-keyword">function</span>(a,b)&#123;<br>    <span class="hljs-built_in">return</span> parseInt(a) / parseInt(b)<br>&#125;<br></code></pre></td></tr></table></figure><p>导出模块中的成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导出成员：</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    sum: sum,<br>    subtract: subtract,<br>    multiply: multiply,<br>    divide: divide<br>&#125;<br></code></pre></td></tr></table></figure><p>简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//简写</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    sum,<br>    subtract,<br>    multiply,<br>    divide<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、导入模块"><a href="#3、导入模块" class="headerlink" title="3、导入模块"></a><strong>3、导入模块</strong></h4><p>创建 common-js模块化/引入模块.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">//引入模块，注意：当前路径必须写 ./<br>const m = require(<span class="hljs-string">&#x27;./四则运算.js&#x27;</span>)<br>console.log(m)<br>const result1 = m.sum(1, 2)<br>const result2 = m.subtract(1, 2)<br>console.log(result1, result2)<br></code></pre></td></tr></table></figure><h4 id="4、运行程序"><a href="#4、运行程序" class="headerlink" title="4、运行程序"></a>4、运行程序</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node common-js模块化/引入模块.js<br></code></pre></td></tr></table></figure><h3 id="三、ES6模块化规范"><a href="#三、ES6模块化规范" class="headerlink" title="三、ES6模块化规范"></a>三、ES6模块化规范</h3><p>ES6使用 export 和 import 来导出、导入模块。</p><h4 id="1、导出模块"><a href="#1、导出模块" class="headerlink" title="1、导出模块"></a><strong>1、导出模块</strong></h4><p>创建 es6模块化/userApi.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取数据列表&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;保存数据&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、导入模块"><a href="#2、导入模块" class="headerlink" title="2、导入模块"></a><strong>2、导入模块</strong></h4><p>创建 es6模块化/userComponent.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//只取需要的方法即可，多个方法用逗号分隔</span><br><span class="hljs-keyword">import</span> &#123; getList, save &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./userApi.js&quot;</span><br>getList()<br>save()<br></code></pre></td></tr></table></figure><p><strong>注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行。</strong></p><h4 id="3、运行程序"><a href="#3、运行程序" class="headerlink" title="3、运行程序"></a>3、运行程序</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">es6</span>模块化-dist/userComponent.js<br></code></pre></td></tr></table></figure><h3 id="四、ES6模块化的另一种写法"><a href="#四、ES6模块化的另一种写法" class="headerlink" title="四、ES6模块化的另一种写法"></a><strong>四、ES6模块化的另一种写法</strong></h3><h4 id="1、导出模块-1"><a href="#1、导出模块-1" class="headerlink" title="1、导出模块"></a><strong>1、导出模块</strong></h4><p>创建 es6模块化/userApi2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取数据列表2&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;保存数据2&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、导入模块-1"><a href="#2、导入模块-1" class="headerlink" title="2、导入模块"></a><strong>2、导入模块</strong></h4><p>创建 es6模块化/userComponent2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./userApi2.js&quot;</span><br>user.getList()<br>user.save()<br></code></pre></td></tr></table></figure><h3 id="五、什么是Webpack"><a href="#五、什么是Webpack" class="headerlink" title="五、什么是Webpack"></a>五、什么是Webpack</h3><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 </p><p><img src="https://gitee.com/mathwm/picBed/raw/master/what-is-webpack.png" alt="img"></p><h3 id="六、Webpack安装"><a href="#六、Webpack安装" class="headerlink" title="六、Webpack安装"></a>六、Webpack安装</h3><h4 id="1、全局安装"><a href="#1、全局安装" class="headerlink" title="1、全局安装"></a>1、全局安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>npm install -g webpack webpack-cli<br></code></pre></td></tr></table></figure><h4 id="2、安装后查看版本号"><a href="#2、安装后查看版本号" class="headerlink" title="2、安装后查看版本号"></a>2、安装后查看版本号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">webpack -v<br></code></pre></td></tr></table></figure><h3 id="七、初始化项目"><a href="#七、初始化项目" class="headerlink" title="七、初始化项目"></a>七、初始化项目</h3><h4 id="1、创建webpack文件夹"><a href="#1、创建webpack文件夹" class="headerlink" title="1、创建webpack文件夹"></a>1、创建webpack文件夹</h4><p>进入webpack目录，执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>npm init -y<br></code></pre></td></tr></table></figure><h4 id="2、创建src文件夹"><a href="#2、创建src文件夹" class="headerlink" title="2、创建src文件夹"></a>2、创建src文件夹</h4><h4 id="3、src下创建common-js"><a href="#3、src下创建common-js" class="headerlink" title="3、src下创建common.js"></a>3、<strong>src下</strong>创建common.js</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">exports.info = <span class="hljs-keyword">function</span> (str) &#123;<br>    document.write(str);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、src下创建utils-js"><a href="#4、src下创建utils-js" class="headerlink" title="4、src下创建utils.js"></a><strong>4、src下创建utils.js</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exports.add = function (a, b) &#123;<br>    return a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、src下创建main-js"><a href="#5、src下创建main-js" class="headerlink" title="5、src下创建main.js"></a><strong>5、src下创建main.js</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./common&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils&#x27;</span>);<br>common.info(<span class="hljs-string">&#x27;Hello world!&#x27;</span> + utils.add(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br></code></pre></td></tr></table></figure><h3 id="八、JS打包"><a href="#八、JS打包" class="headerlink" title="八、JS打包"></a><strong>八、JS打包</strong></h3><h4 id="1、webpack目录下创建配置文件webpack-config-js"><a href="#1、webpack目录下创建配置文件webpack-config-js" class="headerlink" title="1、webpack目录下创建配置文件webpack.config.js"></a><strong>1、webpack目录下创建配置文件</strong>webpack.config.js</h4><p>以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">const path = require(<span class="hljs-string">&quot;path&quot;</span>); //Node.js内置模块<br>module.exports = &#123;<br>    entry: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, //配置入口文件<br>    output: &#123;<br>        path: path.resolve(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), //输出路径，__dirname：当前文件所在路径<br>        filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span> //输出文件<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、命令行执行编译命令"><a href="#2、命令行执行编译命令" class="headerlink" title="2、命令行执行编译命令"></a><strong>2、命令行执行编译命令</strong></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">webpack <span class="hljs-comment">#有黄色警告</span><br>webpack --mode=development <span class="hljs-comment">#没有警告</span><br><span class="hljs-comment">#执行后查看bundle.js 里面包含了上面两个js文件的内容并惊醒了代码压缩</span><br></code></pre></td></tr></table></figure><p>也可以配置项目的npm运行命令，修改package.json文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-comment">//...,</span><br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode=development&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure><p>运行npm命令执行打包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run dev<br></code></pre></td></tr></table></figure><h4 id="3、webpack目录下创建index-html"><a href="#3、webpack目录下创建index-html" class="headerlink" title="3、webpack目录下创建index.html"></a><strong>3、webpack目录下创建index.html</strong></h4><p>引用bundle.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;script src=<span class="hljs-string">&quot;dist/bundle.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="4、浏览器中查看index-html"><a href="#4、浏览器中查看index-html" class="headerlink" title="4、浏览器中查看index.html"></a>4、浏览器中查看index.html</h4><h3 id="九、CSS打包"><a href="#九、CSS打包" class="headerlink" title="九、CSS打包"></a><strong>九、CSS打包</strong></h3><h4 id="1、安装style-loader和-css-loader"><a href="#1、安装style-loader和-css-loader" class="headerlink" title="1、安装style-loader和 css-loader"></a><strong>1、安装style-loader和 css-loader</strong></h4><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p><p>Loader 可以理解为是模块和资源的转换器。</p><p>首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save-dev style-loader css-loader <br></code></pre></td></tr></table></figure><h4 id="2、修改webpack-config-js"><a href="#2、修改webpack-config-js" class="headerlink" title="2、修改webpack.config.js"></a><strong>2、修改webpack.config.js</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">//...,</span><br>    output:&#123;&#125;,<br>    <span class="hljs-built_in">module</span>: &#123;<br>        rules: [  <br>            &#123;  <br>                test: <span class="hljs-regexp">/\.css$/</span>,    <span class="hljs-comment">//打包规则应用到以css结尾的文件上</span><br>                use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;  <br>        ]  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、在src文件夹-创建style-css"><a href="#3、在src文件夹-创建style-css" class="headerlink" title="3、在src文件夹**创建style.css**"></a><strong>3、在src文件夹**</strong>创建style.css**</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:pink;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、修改main-js"><a href="#4、修改main-js" class="headerlink" title="4、修改main.js"></a><strong>4、修改main.js</strong></h4><p>在第一行引入style.css</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">require(<span class="hljs-string">&#x27;./style.css&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="5、浏览器中查看index-html"><a href="#5、浏览器中查看index-html" class="headerlink" title="5、浏览器中查看index.html"></a>5、浏览器中查看index.html</h4>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm使用秘籍（二）Babel</title>
    <link href="/24973f24.html"/>
    <url>/24973f24.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。</p><p>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="安装命令行转码工具"><a href="#安装命令行转码工具" class="headerlink" title="安装命令行转码工具"></a>安装命令行转码工具</h4><p>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --global babel-cli<br><span class="hljs-comment">#查看是否安装成功</span><br>babel --version<br></code></pre></td></tr></table></figure><h3 id="三、Babel的使用"><a href="#三、Babel的使用" class="headerlink" title="三、Babel的使用"></a>三、Babel的使用</h3><h4 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm init -y<br></code></pre></td></tr></table></figure><h4 id="2、创建文件"><a href="#2、创建文件" class="headerlink" title="2、创建文件"></a>2、创建文件</h4><p>下面是一段ES6代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">// 转码前<br>// 定义数据<br><span class="hljs-built_in">let</span> input = [1, 2, 3]<br>// 将数组的每个元素 +1<br>input = input.map(item =&gt; item + 1)<br>console.log(input)<br></code></pre></td></tr></table></figure><h3 id="四、配置-babelrc"><a href="#四、配置-babelrc" class="headerlink" title="四、配置.babelrc"></a>四、配置.babelrc</h3><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>presets字段设定转码规则，将es2015规则加入 .babelrc：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、安装转码器"><a href="#五、安装转码器" class="headerlink" title="五、安装转码器"></a>五、安装转码器</h3><p>在项目中安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save-dev babel-preset-es2015<br></code></pre></td></tr></table></figure><h3 id="六、转码"><a href="#六、转码" class="headerlink" title="六、转码"></a>六、转码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 转码结果写入一个文件</span><br>mkdir dist1<br><span class="hljs-comment"># --out-file 或 -o 参数指定输出文件</span><br>babel src/example.js --out-file dist1/compiled.js<br><span class="hljs-comment"># 或者</span><br>babel src/example.js -o dist1/compiled.js<br><span class="hljs-comment"># 整个目录转码</span><br>mkdir dist2<br><span class="hljs-comment"># --out-dir 或 -d 参数指定输出目录</span><br>babel src --out-dir dist2<br><span class="hljs-comment"># 或者</span><br>babel src -d dist2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue（三）</title>
    <link href="/94af54e4.html"/>
    <url>/94af54e4.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、组件（重点）"><a href="#一、组件（重点）" class="headerlink" title="一、组件（重点）"></a>一、组件（重点）</h3><p>组件（Component）是 Vue.js 最强大的功能之一。</p><p>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><a id="more"></a><p><img src="https://gitee.com/mathwm/picBed/raw/master/0.5887660670164327.png" alt="0.5887660670164327"></p><h4 id="1、局部组件"><a href="#1、局部组件" class="headerlink" title="1、局部组件"></a>1、局部组件</h4><p>定义组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">var app &#x3D; new Vue(&#123;<br>    el: &#39;#app&#39;,<br>    &#x2F;&#x2F; 定义局部组件，这里可以定义多个局部组件<br>    components: &#123;<br>        &#x2F;&#x2F;组件的名字<br>        &#39;Navbar&#39;: &#123;<br>            &#x2F;&#x2F;组件的内容<br>            template: &#39;&lt;ul&gt;&lt;li&gt;首页&lt;&#x2F;li&gt;&lt;li&gt;学员管理&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&#39;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;Navbar&gt;&lt;&#x2F;Navbar&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><h4 id="2、全局组件"><a href="#2、全局组件" class="headerlink" title="2、全局组件"></a>2、全局组件</h4><p>定义全局组件：components/Navbar.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 定义全局组件<br>Vue.component(&#39;Navbar&#39;, &#123;<br>    template: &#39;&lt;ul&gt;&lt;li&gt;首页&lt;&#x2F;li&gt;&lt;li&gt;学员管理&lt;&#x2F;li&gt;&lt;li&gt;讲师管理&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&#39;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;Navbar&gt;&lt;&#x2F;Navbar&gt;<br>&lt;&#x2F;div&gt;<br>&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;&quot;components&#x2F;Navbar.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script&gt;<br>    var app &#x3D; new Vue(&#123;<br>        el: &#39;#app&#39;<br>    &#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="二、实例生命周期"><a href="#二、实例生命周期" class="headerlink" title="二、实例生命周期"></a>二、实例生命周期</h3><p><img src="https://gitee.com/mathwm/picBed/raw/master/0.9177152660737906.png" alt="实例生命周期"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">data: &#123;<br>    message: &#39;床前明月光&#39;<br>&#125;,<br>methods: &#123;<br>    show() &#123;<br>        console.log(&#39;执行show方法&#39;)<br>    &#125;,<br>    update() &#123;<br>        this.message &#x3D; &#39;玻璃好上霜&#39;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button @click&#x3D;&quot;update&quot;&gt;update&lt;&#x2F;button&gt;<br>&lt;h3 id&#x3D;&quot;h3&quot;&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h3&gt;<br></code></pre></td></tr></table></figure><p>分析生命周期相关方法的执行时机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;创建时的四个事件<br>beforeCreate() &#123; &#x2F;&#x2F; 第一个被执行的钩子方法：实例被创建出来之前执行<br>    console.log(this.message) &#x2F;&#x2F;undefined<br>    this.show() &#x2F;&#x2F;TypeError: this.show is not a function<br>    &#x2F;&#x2F; beforeCreate执行时，data 和 methods 中的 数据都还没有没初始化<br>&#125;,<br>created() &#123; &#x2F;&#x2F; 第二个被执行的钩子方法<br>    console.log(this.message) &#x2F;&#x2F;床前明月光<br>    this.show() &#x2F;&#x2F;执行show方法<br>    &#x2F;&#x2F; created执行时，data 和 methods 都已经被初始化好了！<br>    &#x2F;&#x2F; 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作<br>&#125;,<br>beforeMount() &#123; &#x2F;&#x2F; 第三个被执行的钩子方法<br>    console.log(document.getElementById(&#39;h3&#39;).innerText) &#x2F;&#x2F;&#123;&#123; message &#125;&#125;<br>    &#x2F;&#x2F; beforeMount执行时，模板已经在内存中编辑完成了，尚未被渲染到页面中<br>&#125;,<br>mounted() &#123; &#x2F;&#x2F; 第四个被执行的钩子方法<br>    console.log(document.getElementById(&#39;h3&#39;).innerText) &#x2F;&#x2F;床前明月光<br>    &#x2F;&#x2F; 内存中的模板已经渲染到页面，用户已经可以看见内容<br>&#125;,<br><br><br>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;运行中的两个事件<br>beforeUpdate() &#123; &#x2F;&#x2F; 数据更新的前一刻<br>    console.log(&#39;界面显示的内容：&#39; + document.getElementById(&#39;h3&#39;).innerText)<br>    console.log(&#39;data 中的 message 数据是：&#39; + this.message)<br>    &#x2F;&#x2F; beforeUpdate执行时，内存中的数据已更新，但是页面尚未被渲染<br>&#125;,<br>updated() &#123;<br>    console.log(&#39;界面显示的内容：&#39; + document.getElementById(&#39;h3&#39;).innerText)<br>    console.log(&#39;data 中的 message 数据是：&#39; + this.message)<br>    &#x2F;&#x2F; updated执行时，内存中的数据已更新，并且页面已经被渲染<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、路由"><a href="#四、路由" class="headerlink" title="四、路由"></a>四、路由</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。</p><p>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。</p><p>Vue.js 路由需要载入 vue-router 库</p><h4 id="1、引入js"><a href="#1、引入js" class="headerlink" title="1、引入js"></a>1、引入js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;&quot;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h4 id="2、编写html"><a href="#2、编写html" class="headerlink" title="2、编写html"></a>2、编写html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;h1&gt;Hello App!&lt;&#x2F;h1&gt;<br>    &lt;p&gt;<br>        &lt;!-- 使用 router-link 组件来导航. --&gt;<br>        &lt;!-- 通过传入 &#96;to&#96; 属性指定链接. --&gt;<br>        &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 &#96;&lt;a&gt;&#96; 标签 --&gt;<br>        &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;<br>        &lt;router-link to&#x3D;&quot;&#x2F;student&quot;&gt;会员管理&lt;&#x2F;router-link&gt;<br>        &lt;router-link to&#x3D;&quot;&#x2F;teacher&quot;&gt;讲师管理&lt;&#x2F;router-link&gt;<br>    &lt;&#x2F;p&gt;<br>    &lt;!-- 路由出口 --&gt;<br><br>    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;<br><br>    &lt;router-view&gt;&lt;&#x2F;router-view&gt;<br><br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><h4 id="3、编写js"><a href="#3、编写js" class="headerlink" title="3、编写js"></a>3、编写js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    &#x2F;&#x2F; 1. 定义（路由）组件。<br>    &#x2F;&#x2F; 可以从其他文件 import 进来<br>    const Welcome &#x3D; &#123; template: &#39;&lt;div&gt;欢迎&lt;&#x2F;div&gt;&#39; &#125;<br>    const Student &#x3D; &#123; template: &#39;&lt;div&gt;student list&lt;&#x2F;div&gt;&#39; &#125;<br>    const Teacher &#x3D; &#123; template: &#39;&lt;div&gt;teacher list&lt;&#x2F;div&gt;&#39; &#125;<br>    &#x2F;&#x2F; 2. 定义路由<br><br>    &#x2F;&#x2F; 每个路由应该映射一个组件。<br>    const routes &#x3D; [<br>        &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;welcome&#39; &#125;, &#x2F;&#x2F;设置默认指向的路径<br>        &#123; path: &#39;&#x2F;welcome&#39;, component: Welcome &#125;,<br>        &#123; path: &#39;&#x2F;student&#39;, component: Student &#125;,<br>        &#123; path: &#39;&#x2F;teacher&#39;, component: Teacher &#125;<br>    ]<br>    &#x2F;&#x2F; 3. 创建 router 实例，然后传 &#96;routes&#96; 配置<br>    const router &#x3D; new VueRouter(&#123;<br>        routes &#x2F;&#x2F; （缩写）相当于 routes: routes<br>    &#125;)<br>    &#x2F;&#x2F; 4. 创建和挂载根实例。<br>    &#x2F;&#x2F; 从而让整个应用都有路由功能<br>    const app &#x3D; new Vue(&#123;<br>        el: &#39;#app&#39;,<br>        router<br>    &#125;)<br>    &#x2F;&#x2F; 现在，应用已经启动了！<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="五、axios"><a href="#五、axios" class="headerlink" title="五、axios"></a>五、axios</h3><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端</p><ul><li>在浏览器中可以帮助我们完成 ajax请求的发送</li><li>在node.js中可以向远程接口发送请求</li></ul><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;&quot;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>注意：测试时需要开启后端服务器，并且后端开启跨域访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">var app &#x3D; new Vue(&#123;<br>    el: &#39;#app&#39;,<br>    data: &#123;<br>        memberList: []&#x2F;&#x2F;数组<br>    &#125;,<br>    created() &#123;<br>        this.getList()<br>    &#125;,<br>    methods: &#123;<br>        getList(id) &#123;<br>            &#x2F;&#x2F;vm &#x3D; this<br>            axios.get(&#39;http:&#x2F;&#x2F;localhost:8081&#x2F;admin&#x2F;ucenter&#x2F;member&#39;)<br>            .then(response &#x3D;&gt; &#123;<br>                console.log(response)<br>                this.memberList &#x3D; response.data.data.items<br>            &#125;)<br>            .catch(error &#x3D;&gt; &#123;<br>                console.log(error)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>控制台查看输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;table border&#x3D;&quot;1&quot;&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;id&lt;&#x2F;td&gt;<br>            &lt;td&gt;姓名&lt;&#x2F;td&gt;<br>        &lt;&#x2F;tr&gt;<br>        &lt;tr v-for&#x3D;&quot;item in memberList&quot;&gt;<br>            &lt;td&gt;&#123;&#123;item.memberId&#125;&#125;&lt;&#x2F;td&gt;<br>            &lt;td&gt;&#123;&#123;item.nickname&#125;&#125;&lt;&#x2F;td&gt;<br>        &lt;&#x2F;td&gt;<br>    &lt;&#x2F;tr&gt;<br>&lt;&#x2F;table&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><h3 id="六、element-ui："><a href="#六、element-ui：" class="headerlink" title="六、element-ui："></a>六、element-ui：</h3><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建</p><p>官网： <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p><p>创建 06-element-ui.html</p><p>将element-ui引入到项目</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/67c16425-795a-48bb-ad7d-e0b8fa1c8ea5.png" alt="img"></p><h4 id="1、引入css"><a href="#1、引入css" class="headerlink" title="1、引入css"></a>1、引入css</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- import CSS --&gt;<br>&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;<br></code></pre></td></tr></table></figure><h4 id="2、引入js"><a href="#2、引入js" class="headerlink" title="2、引入js"></a>2、引入js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- import Vue before Element --&gt;<br>&lt;script src&#x3D;&quot;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;!-- import JavaScript --&gt;<br>&lt;script src&#x3D;&quot;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h4 id="3、编写html"><a href="#3、编写html" class="headerlink" title="3、编写html"></a>3、编写html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;el-button @click&#x3D;&quot;visible &#x3D; true&quot;&gt;Button&lt;&#x2F;el-button&gt;<br>    &lt;el-dialog :visible.sync&#x3D;&quot;visible&quot; title&#x3D;&quot;Hello world&quot;&gt;<br>        &lt;p&gt;Try Element&lt;&#x2F;p&gt;<br>    &lt;&#x2F;el-dialog&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure><p>关于.sync的扩展阅读</p><p><a href="https://www.jianshu.com/p/d42c508ea9de">https://www.jianshu.com/p/d42c508ea9de</a></p><h4 id="4、编写js"><a href="#4、编写js" class="headerlink" title="4、编写js"></a>4、编写js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    new Vue(&#123;<br>      el: &#39;#app&#39;,<br>      data: function () &#123;&#x2F;&#x2F;定义Vue中data的另一种方式<br>        return &#123; visible: false &#125;<br>      &#125;<br>    &#125;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="其他ui组件"><a href="#其他ui组件" class="headerlink" title="其他ui组件"></a>其他ui组件</h3>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue（二）</title>
    <link href="/ed774485.html"/>
    <url>/ed774485.html</url>
    
    <content type="html"><![CDATA[<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。</p><p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><a id="more"></a><h3 id="一、初始Vue-js"><a href="#一、初始Vue-js" class="headerlink" title="一、初始Vue.js"></a>一、初始Vue.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- id标识vue作用的范围 --&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;!-- &#123;&#123;&#125;&#125; 插值表达式，绑定vue中的data数据 --&gt;<br>    &#123;&#123; message &#125;&#125;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">// 创建一个vue对象</span><br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<span class="hljs-comment">//绑定vue作用的范围</span><br>        data: &#123;<span class="hljs-comment">//定义页面中显示的模型数据</span><br>            message: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>这就是声明式渲染</strong>：Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><p>这里的核心思想就是没有繁琐的DOM操作，例如jQuery中，我们需要先找到div节点，获取到DOM对象，然后进行一系列的节点操作</p><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="1、基本数据渲染和指令"><a href="#1、基本数据渲染和指令" class="headerlink" title="1、基本数据渲染和指令"></a>1、基本数据渲染和指令</h4><p>你看到的 v-bind 特性被称为指令。指令带有前缀 v- </p><p>除了使用插值表达式{ { } }进行数据渲染，也可以使用 v-bind指令，它的简写的形式就是一个冒号（:）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data: &#123;<br>    content: <span class="hljs-string">&#x27;我是标题&#x27;</span>,<br>    message: <span class="hljs-string">&#x27;页面加载于 &#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 如果要将模型数据绑定在html属性中，则使用 v-bind 指令<br>     此时title中显示的是模型数据<br>--&gt;<br>&lt;h1 v-bind:title=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>    &#123;&#123;content&#125;&#125;<br>&lt;/h1&gt;<br>&lt;!-- v-bind 指令的简写形式： 冒号（:） --&gt;<br>&lt;h1 :title=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>    &#123;&#123;content&#125;&#125;<br>&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h4 id="2、双向数据绑定"><a href="#2、双向数据绑定" class="headerlink" title="2、双向数据绑定"></a>2、双向数据绑定</h4><p>创建 02-双向数据绑定.html</p><p>双向数据绑定和单向数据绑定：使用 v-model 进行双向数据绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">data: &#123;<br>    searchMap:&#123;<br>        keyWord: &#39;学习学习&#39;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- v-bind:value只能进行单向的数据渲染 --&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-bind:value=<span class="hljs-string">&quot;searchMap.keyWord&quot;</span>&gt;<br>&lt;!-- v-model 可以进行双向的数据绑定  --&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;searchMap.keyWord&quot;</span>&gt;<br>&lt;p&gt;您要查询的是：&#123;&#123;searchMap.keyWord&#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h4 id="3、事件"><a href="#3、事件" class="headerlink" title="3、事件"></a>3、事件</h4><p>创建 03-事件.html</p><p><strong>需求：</strong>点击查询按钮，按照输入框中输入的内容查找公司相关信息</p><p>在前面的例子基础上，data节点中增加 result，增加 methods节点 并定义 search方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data: &#123;<br>     searchMap:&#123;<br>         keyWord: <span class="hljs-string">&#x27;尚硅谷&#x27;</span><br>     &#125;,<br>     <span class="hljs-comment">//查询结果</span><br>     result: &#123;&#125;<br>&#125;,<br>methods:&#123;<br>    <span class="hljs-function"><span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;search&#x27;</span>)<br>        <span class="hljs-comment">//TODO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>html中增加 button 和 p</p><p>使用 v-on 进行数件处理，v-on:click 表示处理鼠标点击事件，事件调用的方法定义在 vue 对象声明的 methods 节点中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- v-on 指令绑定事件，click指定绑定的事件类型，事件发生时调用vue中methods节点中定义的方法 --&gt;<br>&lt;button v-on:click=<span class="hljs-string">&quot;search()&quot;</span>&gt;查询&lt;/button&gt;<br>&lt;p&gt;您要查询的是：&#123;&#123;searchMap.keyWord&#125;&#125;&lt;/p&gt;<br>&lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;result.site&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123;result.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>完善search方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;search&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.result = &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;简易编程&quot;</span>,<br>        <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;http://www.javacgo.com&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- v-on 指令的简写形式 @ --&gt;<br>&lt;button @click=<span class="hljs-string">&quot;search()&quot;</span>&gt;查询&lt;/button&gt;<br></code></pre></td></tr></table></figure><h4 id="4、修饰符"><a href="#4、修饰符" class="headerlink" title="4、修饰符"></a>4、修饰符</h4><p>创建 04-修饰符.html</p><p>修饰符 (Modifiers) 是以半角句号（.）指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><p>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p><p>即阻止事件原本的默认行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data: &#123;<br>    user: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 修饰符用于指出一个指令应该以特殊方式绑定。<br>     这里的 .prevent 修饰符告诉 v-on 指令对于触发的事件调用js的 event.preventDefault()：<br>     即阻止表单提交的默认行为 --&gt;<br>&lt;form action=<span class="hljs-string">&quot;save&quot;</span> v-on:submit.prevent=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;<br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span> v-model=<span class="hljs-string">&quot;user.username&quot;</span>&gt;<br>        &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;保存&lt;/button&gt;<br>    &lt;/label&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">onSubmit</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user.username) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;提交表单&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            alert(<span class="hljs-string">&#x27;请输入用户名&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、条件渲染"><a href="#5、条件渲染" class="headerlink" title="5、条件渲染"></a>5、条件渲染</h4><p>创建 05-条件渲染.html</p><p>v-if：条件指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data: &#123;<br>    ok: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：单个复选框绑定到布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> v-model=<span class="hljs-string">&quot;ok&quot;</span>&gt;同意许可协议<br>&lt;!-- v:<span class="hljs-keyword">if</span>条件指令：还有v-<span class="hljs-keyword">else</span>、v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span> 切换开销大 --&gt;<br>&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;<span class="hljs-keyword">if</span>：Lorem ipsum dolor sit amet.&lt;/h1&gt;<br>&lt;h1 v-<span class="hljs-keyword">else</span>&gt;no&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>v-show：条件指令</p><p>使用v-show完成和上面相同的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- v:show 条件指令 初始渲染开销大 --&gt;<br>&lt;h1 v-show=<span class="hljs-string">&quot;ok&quot;</span>&gt;show：Lorem ipsum dolor sit amet.&lt;/h1&gt;<br>&lt;h1 v-show=<span class="hljs-string">&quot;!ok&quot;</span>&gt;no&lt;/h1&gt;<br></code></pre></td></tr></table></figure><ul><li><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li><li>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li><li>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</li></ul><h4 id="6、列表渲染"><a href="#6、列表渲染" class="headerlink" title="6、列表渲染"></a>6、列表渲染</h4><p>创建 06-列表渲染.html</p><p>v-for：列表循环指令</p><p><strong>例1：简单的列表渲染</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <span class="hljs-number">1</span>、简单的列表渲染 --&gt;<br>&lt;ul&gt;<br>    &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;n in 10&quot;</span>&gt;&#123;&#123; n &#125;&#125; &lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;ul&gt;<br>    &lt;!-- 如果想获取索引，则使用index关键字，注意，圆括号中的index必须放在后面 --&gt;<br>    &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(n, index) in 5&quot;</span>&gt;&#123;&#123; n &#125;&#125; - &#123;&#123; index &#125;&#125; &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p><strong>例2：遍历数据列表</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">data: &#123;<br>    userList: [<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;helen&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;peter&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;andy&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <span class="hljs-number">2</span>、遍历数据列表 --&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in userList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span> --&gt;<br>    &lt;tr v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item, index) in userList&quot;</span>&gt;<br>        &lt;td&gt;&#123;&#123;index&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;item.username&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通俗易懂多线程（二）不变的Immutable</title>
    <link href="/c67e6147.html"/>
    <url>/c67e6147.html</url>
    
    <content type="html"><![CDATA[<p>Java.lang.String类用于表示字符串。String类中并没有修改字符串内容的方法。也就是说，String的实例所表示的字符串的内容绝对不会发生变化。</p><p>正因为如此，String类的方法无需声明synchronized。因为实例的内部状态不会发生变化，所以String实例被多少个线程访问，也无需执行线程互斥处理。</p><p>Imumutable，自己玩自己的，在一个空间里，别的线程不影响</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person alice = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Alaska&quot;</span>);<br>        <span class="hljs-keyword">new</span> PrintPersonThread(alice).start();<br>        <span class="hljs-keyword">new</span> PrintPersonThread(alice).start();<br>        <span class="hljs-keyword">new</span> PrintPersonThread(alice).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String address;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[ Person: name = &quot;</span> + name + <span class="hljs-string">&quot;, address = &quot;</span> + address + <span class="hljs-string">&quot; ]&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintPersonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Person person;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PrintPersonThread</span><span class="hljs-params">(Person person)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; prints &quot;</span> + person);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>多线程设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程juc（一）Semaphore</title>
    <link href="/d88f9ffb.html"/>
    <url>/d88f9ffb.html</url>
    
    <content type="html"><![CDATA[<p>限流作用，Single Threaded Execution模式用于确保某个区域“只能由一个线程“执行。下面我们将这个模式进一步扩展，以确保某个区域”最多只能由N个线程“执行。这时就用到计数信号量来控制线程数量。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + s);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 资源个数有限</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BoundedResource</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Semaphore semaphore;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> permits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Random random = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">314159</span>);<br><br>    <span class="hljs-comment">// 构造函数(permits为资源个数)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BoundedResource</span><span class="hljs-params">(<span class="hljs-keyword">int</span> permits)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.semaphore = <span class="hljs-keyword">new</span> Semaphore(permits);<br>        <span class="hljs-keyword">this</span>.permits = permits;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        semaphore.acquire();<br>        <span class="hljs-keyword">try</span> &#123;<br>            doUse();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            semaphore.release();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 实际使用资源(此处仅使用Thread.sleep)</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doUse</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Log.println(<span class="hljs-string">&quot;BEGIN: used = &quot;</span> + (permits - semaphore.availablePermits()));<br>        Thread.sleep(random.nextInt(<span class="hljs-number">500</span>));<br>        Log.println(<span class="hljs-string">&quot;END:   used = &quot;</span> + (permits - semaphore.availablePermits()));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用资源的线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Random random = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">26535</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BoundedResource resource;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserThread</span><span class="hljs-params">(BoundedResource resource)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.resource = resource;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                resource.use();<br>                Thread.sleep(random.nextInt(<span class="hljs-number">3000</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 设置3个资源</span><br>        BoundedResource resource = <span class="hljs-keyword">new</span> BoundedResource(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// 10个线程使用资源</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> UserThread(resource).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>多线程设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8（一）Lambda基础语法</title>
    <link href="/51e730c6.html"/>
    <url>/51e730c6.html</url>
    
    <content type="html"><![CDATA[<h3 id="Lambda是一个匿名函数"><a href="#Lambda是一个匿名函数" class="headerlink" title="Lambda是一个匿名函数"></a>Lambda是一个<strong>匿名函数</strong></h3><p>Lambda是一个<strong>匿名函数</strong>，可以理解为<strong>一段可以传递的代码</strong></p><h4 id="语法格式一：无参数，无返回值"><a href="#语法格式一：无参数，无返回值" class="headerlink" title="语法格式一：无参数，无返回值"></a>语法格式一：无参数，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">() -&gt; System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Runnable r1 = () -&gt;  System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="语法格式二：一个参数，无返回值"><a href="#语法格式二：一个参数，无返回值" class="headerlink" title="语法格式二：一个参数，无返回值"></a>语法格式二：一个参数，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);<br>con.accept(<span class="hljs-string">&quot;Java简易编程&quot;</span>);<br></code></pre></td></tr></table></figure><p>语法格式三：若只有一个参数，小括号可以不写</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">Consumer&lt;String&gt; con = <span class="hljs-meta">x</span> -&gt; System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-meta">x</span>);<br></code></pre></td></tr></table></figure><h4 id="语法格式三：有两个以上的参数，有返回值，并且Lambda体有多条语句"><a href="#语法格式三：有两个以上的参数，有返回值，并且Lambda体有多条语句" class="headerlink" title="语法格式三：有两个以上的参数，有返回值，并且Lambda体有多条语句"></a>语法格式三：有两个以上的参数，有返回值，并且Lambda体有多条语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x,y) -&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;函数式接口&quot;</span>);<br><span class="hljs-keyword">return</span> Integer.compare(x,y);<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果Lambada中只有一条语句，大括号和return可以不写</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gml">Comparator&lt;Integer&gt; com = (<span class="hljs-symbol">x</span>,<span class="hljs-symbol">y</span>) -&gt; Integer.compare(<span class="hljs-symbol">x</span>,<span class="hljs-symbol">y</span>);<br><br></code></pre></td></tr></table></figure><h4 id="语法格式四：参数列表的数据类型可以省略不写，类型可以通过上下文推断"><a href="#语法格式四：参数列表的数据类型可以省略不写，类型可以通过上下文推断" class="headerlink" title="语法格式四：参数列表的数据类型可以省略不写，类型可以通过上下文推断"></a>语法格式四：参数列表的数据类型可以省略不写，类型可以通过上下文推断</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Comparator<span class="hljs-tag">&lt;<span class="hljs-name">Integer</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Lambda表达式需要“函数式接口的支持”"><a href="#Lambda表达式需要“函数式接口的支持”" class="headerlink" title="Lambda表达式需要“函数式接口的支持”"></a>Lambda表达式需要“函数式接口的支持”</h3><p>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口，可以使用注解@FunctionalInterface修饰，可以做检查。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git多个远程仓库</title>
    <link href="/d4138e8e.html"/>
    <url>/d4138e8e.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>用GitHub管理自己的开源项目有几年了，最近一年更新得比较多，仓库也越来越多越来越大。有时候感觉GitHub太慢，尤其是最近感觉更为明显，于是萌生了再找个国内类似GitHub的代码托管平台的想法，同时我也还想持续更新GitHub上的仓库，于是需要一个本地仓库（我自己的开发机）多个远程仓库（Github、码云、coding）。</p><h3 id="2-一个远程仓库的git-config"><a href="#2-一个远程仓库的git-config" class="headerlink" title="2. 一个远程仓库的git config"></a>2. 一个远程仓库的git config</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br>        <span class="hljs-attr">repositoryformatversion</span> = <span class="hljs-number">0</span><br>        <span class="hljs-attr">filemode</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-attr">bare</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-attr">logallrefupdates</span> = <span class="hljs-literal">true</span><br><span class="hljs-section">[remote &quot;origin&quot;]</span><br>        <span class="hljs-attr">url</span> = https://github.com/xx/xxxx.git<br>        <span class="hljs-attr">fetch</span> = +refs/heads/*:refs/remotes/origin/*<br><span class="hljs-section">[branch &quot;master&quot;]</span><br>        <span class="hljs-attr">remote</span> = origin<br>        <span class="hljs-attr">merge</span> = refs/heads/master<br></code></pre></td></tr></table></figure><h3 id="3-用git命令行添加多个远程仓库"><a href="#3-用git命令行添加多个远程仓库" class="headerlink" title="3. 用git命令行添加多个远程仓库"></a>3. 用git命令行添加多个远程仓库</h3><p>添加一个名为“mirror”的远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add mirror https://gitee.com/xx/xxxxxx.git<br></code></pre></td></tr></table></figure><p>执行完这条命令后.git/config文件内容变成了：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[core]</span><br>        <span class="hljs-attr">repositoryformatversion</span> = <span class="hljs-string">0</span><br>        <span class="hljs-attr">filemode</span> = <span class="hljs-string">true</span><br>        <span class="hljs-attr">bare</span> = <span class="hljs-string">false</span><br>        <span class="hljs-attr">logallrefupdates</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">[remote</span> <span class="hljs-string">&quot;origin&quot;]</span><br>        <span class="hljs-attr">url</span> = <span class="hljs-string">https://github.com/xx/xxxx.git</span><br>        <span class="hljs-attr">fetch</span> = <span class="hljs-string">+refs/heads/*:refs/remotes/origin/*</span><br><span class="hljs-meta">[branch</span> <span class="hljs-string">&quot;master&quot;]</span><br>        <span class="hljs-attr">remote</span> = <span class="hljs-string">origin</span><br>        <span class="hljs-attr">merge</span> = <span class="hljs-string">refs/heads/master</span><br><span class="hljs-meta">[remote</span> <span class="hljs-string">&quot;mirror&quot;]</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">https://gitee.com/xx/xxx.git</span><br>    <span class="hljs-attr">fetch</span> = <span class="hljs-string">+refs/heads/*:refs/remotes/mirror/*</span><br></code></pre></td></tr></table></figure><p>此时已经是一个本地仓库，两个远程仓库。使用下面的命令可以分别从两个远程仓库拉取和推送到两个远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin master <br>git pull mirror master<br>git push origin master <br>git push mirror master<br></code></pre></td></tr></table></figure><h3 id="4-一条命令同时更新多个远程仓库"><a href="#4-一条命令同时更新多个远程仓库" class="headerlink" title="4. 一条命令同时更新多个远程仓库"></a>4. 一条命令同时更新多个远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote set-url --add origin https://gitee.com/xx/xxxXX.git<br></code></pre></td></tr></table></figure><p>执行这条命令后.git/config内容变成：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[core]</span><br>        <span class="hljs-attr">repositoryformatversion</span> = <span class="hljs-string">0</span><br>        <span class="hljs-attr">filemode</span> = <span class="hljs-string">true</span><br>        <span class="hljs-attr">bare</span> = <span class="hljs-string">false</span><br>        <span class="hljs-attr">logallrefupdates</span> = <span class="hljs-string">true</span><br><span class="hljs-meta">[remote</span> <span class="hljs-string">&quot;origin&quot;]</span><br>        <span class="hljs-attr">url</span> = <span class="hljs-string">https://github.com/xx/xxx.git</span><br>        <span class="hljs-attr">url</span> = <span class="hljs-string">https://gitee.com/xx/xxxXX.git</span><br>        <span class="hljs-attr">fetch</span> = <span class="hljs-string">+refs/heads/*:refs/remotes/origin/*</span><br><span class="hljs-meta">[branch</span> <span class="hljs-string">&quot;master&quot;]</span><br>        <span class="hljs-attr">remote</span> = <span class="hljs-string">origin</span><br>        <span class="hljs-attr">merge</span> = <span class="hljs-string">refs/heads/master</span><br><span class="hljs-meta">[remote</span> <span class="hljs-string">&quot;mirror&quot;]</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">https://gitee.com/xx/xxx.git</span><br>    <span class="hljs-attr">fetch</span> = <span class="hljs-string">+refs/heads/*:refs/remotes/mirror/*</span><br></code></pre></td></tr></table></figure><p>之前添加的“mirror”留着或删掉都没关系，这时候我们一条命令即可更新两个远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin master<br></code></pre></td></tr></table></figure><h3 id="5-免输入密码操作远程仓库"><a href="#5-免输入密码操作远程仓库" class="headerlink" title="5. 免输入密码操作远程仓库"></a>5. 免输入密码操作远程仓库</h3><p>执行远程仓库操作需要输入密码是件比较麻烦的事情，在配置文件的url里配上用户名和密码即可免掉这样的麻烦，提高操作效率。免输密码操作远程仓库还可以通过ssh方式实现，下面只给出https方式的免输密码配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">url = https://<span class="hljs-variable">$&#123;user&#125;</span>:<span class="hljs-variable">$&#123;password&#125;</span>@github.com/xx/xxx.git<br></code></pre></td></tr></table></figure><p>把上面配置中的“${user}”和“${password}”用你的远程仓库用户名和密码代入即可。</p><h3 id="6-直接修改git配置文件实现多个远程仓库"><a href="#6-直接修改git配置文件实现多个远程仓库" class="headerlink" title="6. 直接修改git配置文件实现多个远程仓库"></a>6. 直接修改git配置文件实现多个远程仓库</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">[core]<br>        repositoryformatversion &#x3D; 0<br>        filemode &#x3D; true<br>        bare &#x3D; false<br>        logallrefupdates &#x3D; true<br>[remote &quot;origin&quot;]<br>        url &#x3D; https:&#x2F;&#x2F;$&#123;user&#125;:$&#123;password&#125;@github.com&#x2F;xx&#x2F;xxx.git<br>        url &#x3D; https:&#x2F;&#x2F;$&#123;user&#125;:$&#123;password&#125;@gitee.com&#x2F;xx&#x2F;xxxXX.git<br>        url &#x3D; https:&#x2F;&#x2F;$&#123;user&#125;:$&#123;password&#125;@git.coding.net&#x2F;xx&#x2F;xxxXXccc.git<br>        fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*<br>[branch &quot;master&quot;]<br>        remote &#x3D; origin<br>        merge &#x3D; refs&#x2F;heads&#x2F;master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通俗易懂多线程（一）SingleThreadedExecution</title>
    <link href="/a89aa826.html"/>
    <url>/a89aa826.html</url>
    
    <content type="html"><![CDATA[<h4 id="一次只能有一个线程执行"><a href="#一次只能有一个线程执行" class="headerlink" title="一次只能有一个线程执行"></a>一次只能有一个线程执行</h4><p>​    情景：游乐园上有一个旋转木马，有三对情侣过去游玩，当情侣kiss时候，旋转木马就拍照。</p><p>下面代码中MerryGoRound.java定义了一个公用的模板对象，后面Main方法中实例一个唯一对象，Lovers（线程）实例了三个对象。</p><p>大家都执行了这个代码：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(boyFriend + <span class="hljs-string">&quot; BEGIN&quot;</span> +girlFriend);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            merryGoRound.kiss(boyFriend, girlFriend);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>merryGoRound.kiss(boyFriend, girlFriend);中含有公用对象，这段代码又可能穿插。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kiss</span><span class="hljs-params">(String boyFriend, String girlFriend)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.counter++;<br>       <span class="hljs-keyword">this</span>.name = boyFriend;<br>       <span class="hljs-keyword">this</span>.address = girlFriend;<br>       check();<br>   &#125;<br></code></pre></td></tr></table></figure><p>MerryGoRound里面的boyFriend和girlFriend也是只有一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MerryGoRound</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String boyFriend = <span class="hljs-string">&quot;Nobody&quot;</span>;<br>    <span class="hljs-keyword">private</span> String girlFriend = <span class="hljs-string">&quot;Nobody&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kiss</span><span class="hljs-params">(String boyFriend, String girlFriend)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.counter++;<br>        <span class="hljs-keyword">this</span>.name = boyFriend;<br>        <span class="hljs-keyword">this</span>.address = girlFriend;<br>        takeAPicture();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No.&quot;</span> + counter + <span class="hljs-string">&quot;: &quot;</span> + boyFriend + <span class="hljs-string">&quot;, &quot;</span> + girlFriend;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">takeAPicture</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (boyFriend.charAt(<span class="hljs-number">0</span>) != girlFriend.charAt(<span class="hljs-number">0</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;***** BROKEN ***** &quot;</span> + toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lovers</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MerryGoRound merryGoRound;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String boyFriend;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String girlFriend;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MerryGoRound</span><span class="hljs-params">(MerryGoRound merryGoRound, String boyFriend, String girlFriend)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.merryGoRound = merryGoRound;<br>        <span class="hljs-keyword">this</span>.boyFriend = boyFriend;<br>        <span class="hljs-keyword">this</span>.girlFriend = girlFriend;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(boyFriend + <span class="hljs-string">&quot; BEGIN&quot;</span> +girlFriend);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            merryGoRound.kiss(boyFriend, girlFriend);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Testing Gate, hit CTRL+C to exit.&quot;</span>);<br>        MerryGoRound merryGoRound = <span class="hljs-keyword">new</span> <span class="hljs-type">MerryGoRound</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-type">Lovers</span>(lovers, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Alas&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-type">Lovers</span>(lovers, <span class="hljs-string">&quot;Bobby&quot;</span>, <span class="hljs-string">&quot;Braz&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-type">Lovers</span>(lovers, <span class="hljs-string">&quot;Chris&quot;</span>, <span class="hljs-string">&quot;Cana&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面是解决方法加入同步代码关键字<strong>synchronized</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MerryGoRound</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String boyFriend = <span class="hljs-string">&quot;Nobody&quot;</span>;<br>    <span class="hljs-keyword">private</span> String girlFriend = <span class="hljs-string">&quot;Nobody&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kiss</span><span class="hljs-params">(String boyFriend, String girlFriend)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.counter++;<br>        <span class="hljs-keyword">this</span>.name = boyFriend;<br>        <span class="hljs-keyword">this</span>.address = girlFriend;<br>        takeAPicture();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No.&quot;</span> + counter + <span class="hljs-string">&quot;: &quot;</span> + boyFriend + <span class="hljs-string">&quot;, &quot;</span> + girlFriend;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">takeAPicture</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (boyFriend.charAt(<span class="hljs-number">0</span>) != girlFriend.charAt(<span class="hljs-number">0</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;***** BROKEN ***** &quot;</span> + toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>多线程设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String与StringBuffer之间的区别</title>
    <link href="/1e717591.html"/>
    <url>/1e717591.html</url>
    
    <content type="html"><![CDATA[<h4 id="String与StringBuffer之间的区别。"><a href="#String与StringBuffer之间的区别。" class="headerlink" title="String与StringBuffer之间的区别。"></a>String与StringBuffer之间的区别。</h4><p>回答：</p><p>​        JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用 StringBuffer来动态构造字符数据。</p><p>由上可以看出StringBuffer可以动态改变字符数据，那么如果定义了一个final的StringBuffer后，还可以改变字符数据吗？例如下列代码有错误吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>sb.append(<span class="hljs-string">&quot;a&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;b&quot;</span>);<br>System.out.println(sb.toString());<br></code></pre></td></tr></table></figure><p>答案是：</p><p>​        正确的。定义为final类型的数据是不可以修改的，那为啥上面的代码为啥是正确的呢？我们要看一下final的定义了：对于基本类型，final使数值恒定不变；而对于对象引用，final使引用恒定不变。一旦引用被初始化指向一个对象，就无法再把它改为指向另一个对象。然而，对象其自身却是可以被修改的，Java并未提供使任何对象恒定不变的途径。</p><p>根据上面的定义，那么下面的代码是错误的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>sb.append(<span class="hljs-string">&quot;a&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;b&quot;</span>);<br>System.out.println(sb.toString());<br>sb = <span class="hljs-keyword">new</span> StringBuffer();<br></code></pre></td></tr></table></figure><p>因为变量sb定义为final类型的了，所以它的引用不能改变；所以<strong>sb = new StringBuffer()；</strong>代码是错误的，编译不通过。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>thinker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue（一）</title>
    <link href="/ad25968.html"/>
    <url>/ad25968.html</url>
    
    <content type="html"><![CDATA[<h4 id="Vue扩展插件"><a href="#Vue扩展插件" class="headerlink" title="Vue扩展插件"></a>Vue扩展插件</h4><p>1）vue-cli: vue脚手架</p><p>2）vue-resource(axios): ajax请求</p><p>3）vue-router: 路由</p><p>4）vuex: 状态管理</p><p>5）vue-lazyload: 图片懒加载</p><p>6）vue-scroller: 页面滑动相关</p><p>7）mint-ui: 基于vue的UI组件库（移动端）</p><p>8）element-ui: 基于vue的UI组件库（PC端）</p><p><strong>所有vue的方法都带有$开头</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm使用秘籍(一)</title>
    <link href="/6f2b5017.html"/>
    <url>/6f2b5017.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是NPM"><a href="#一、什么是NPM" class="headerlink" title="一、什么是NPM"></a>一、什么是NPM</h3><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。</p><h3 id="二、NPM工具的安装位置"><a href="#二、NPM工具的安装位置" class="headerlink" title="二、NPM工具的安装位置"></a>二、NPM工具的安装位置</h3><p>我们通过npm 可以很方便地下载js库，管理前端工程。</p><p>Node.js默认安装的npm包和工具的位置：Node.js目录\node_modules</p><p>在这个目录下你可以看见 npm目录，npm本身就是被NPM包管理器管理的一个工具，说明 Node.js已经集成了npm工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment">#在命令提示符输入 npm -v 可查看当前npm版本</span><br>npm -v<br></code></pre></td></tr></table></figure><h3 id="三、使用npm管理项目"><a href="#三、使用npm管理项目" class="headerlink" title="三、使用npm管理项目"></a>三、使用npm管理项目</h3><h4 id="1、创建文件夹npm"><a href="#1、创建文件夹npm" class="headerlink" title="1、创建文件夹npm"></a>1、创建文件夹npm</h4><h4 id="2、项目初始化"><a href="#2、项目初始化" class="headerlink" title="2、项目初始化"></a>2、项目初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化</span><br>npm init<br><span class="hljs-meta">#</span><span class="bash">按照提示输入相关信息，如果是用默认值则直接回车即可。</span><br><span class="hljs-meta">#</span><span class="bash">name: 项目名称</span><br><span class="hljs-meta">#</span><span class="bash">version: 项目版本号</span><br><span class="hljs-meta">#</span><span class="bash">description: 项目描述</span><br><span class="hljs-meta">#</span><span class="bash">keywords: &#123;Array&#125;关键词，便于用户搜索到我们的项目</span><br><span class="hljs-meta">#</span><span class="bash">最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml</span><br><span class="hljs-meta">#</span><span class="bash">我们之后也可以根据需要进行修改。</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">如果想直接生成 package.json 文件，那么可以使用命令</span><br>npm init -y<br></code></pre></td></tr></table></figure><h3 id="四、Npm更换成淘宝镜像源"><a href="#四、Npm更换成淘宝镜像源" class="headerlink" title="四、Npm更换成淘宝镜像源"></a>四、Npm更换成淘宝镜像源</h3><h4 id="1-需求由来"><a href="#1-需求由来" class="headerlink" title="1.需求由来"></a>1.需求由来</h4><p>由于node安装插件是从国外服务器下载，受网络影响大，速度慢且可能出现异常。</p><h4 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h4 id="3-永久使用"><a href="#3-永久使用" class="headerlink" title="3.永久使用"></a>3.永久使用</h4><p>设置成全局的下载镜像站点，这样每次install的时候就不用加–registry，默认会从淘宝镜像下载，设置方法如下：</p><p>1.打开.npmrc文件（nodejs\node_modules\npm\npmrc，没有的话可以使用git命令行建一个( touch .npmrc)，用cmd命令建会报错）<br>2.增加 registry =<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>  即可。</p><p>也可以按如下方式直接在命令行设置</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>检测是否成功</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 配置后可通过下面方式来验证是否成功</span><br>npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry<br><span class="hljs-comment">// 或</span><br>npm info express<br></code></pre></td></tr></table></figure><p><strong>注：</strong>如果想还原npm仓库地址，只需再把地址配置成npm镜像就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><h4 id="4-如何将npm升级到最新版本"><a href="#4-如何将npm升级到最新版本" class="headerlink" title="4.如何将npm升级到最新版本"></a>4.如何将npm升级到最新版本</h4><p>更新到指定版本 npm -g install <a href="mailto:&#110;&#112;&#109;&#64;&#x35;&#x2e;&#54;&#x2e;&#48;">&#110;&#112;&#109;&#64;&#x35;&#x2e;&#54;&#x2e;&#48;</a> （@后面加指定版本号）</p><p><code>npm install -g npm@latest</code> to update npm because it is sometimes buggy.</p><h3 id="五、NUXT-vue项目打包发布"><a href="#五、NUXT-vue项目打包发布" class="headerlink" title="五、NUXT vue项目打包发布"></a>五、NUXT vue项目打包发布</h3><p>1、首先执行npm run build；</p><p>2、添加package.json配置内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;config&quot;:&#123;<br>    &quot;nuxt&quot;:&#123;<br>      &quot;host&quot;:&quot;0.0.0.0&quot;,<br>      &quot;port&quot;:&quot;1818&quot;<br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>3、将打包好的</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">.nuxt<br>static<br>nuxt.config.js<br>package.json<br></code></pre></td></tr></table></figure><p>这四个文件丢到服务器的某个文件夹中，在服务器上安装node环境</p><p>4、在服务器上面执行npm install</p><p>5、在服务器上面执行npm run start</p><p>使用nginx做代理，想项目域名代理到localhost:3000上面就阔以用域名直接访问项目了；</p><p>到此nuxt项目部署完成</p><h3 id="六、Centos7安装最新版Node和Npm"><a href="#六、Centos7安装最新版Node和Npm" class="headerlink" title="六、Centos7安装最新版Node和Npm"></a>六、Centos7安装最新版Node和Npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://nodejs.org/dist/v10.13.0/node-v10.13.0-linux-x64.tar.xz <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">xz -d node-v10.13.0-linux-x64.tar.xz<br>tar -xf node-v10.13.0-linux-x64.tar<br></code></pre></td></tr></table></figure><p>配置node和npm。注意node所在目录，我的node目录是~/node-v10.13.0-linux-x64</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ln -s ~/node-v10.13.0-linux-x64/bin/node /usr/bin/node<br>ln -s ~/node-v10.13.0-linux-x64/bin/npm /usr/bin/npm<br></code></pre></td></tr></table></figure><h3 id="七、npm-install命令的使用"><a href="#七、npm-install命令的使用" class="headerlink" title="七、npm install命令的使用"></a>七、npm install命令的使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">使用 npm install 安装依赖包的最新版，</span><br><span class="hljs-meta">#</span><span class="bash">模块安装的位置：项目目录\node_modules</span><br><span class="hljs-meta">#</span><span class="bash">安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本</span><br><span class="hljs-meta">#</span><span class="bash">同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;</span><br>npm install jquery<br><span class="hljs-meta">#</span><span class="bash">npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</span><br>npm install #根据package.json中的配置下载依赖，初始化项目<br><span class="hljs-meta">#</span><span class="bash">如果安装时想指定特定的版本</span><br>npm install jquery@2.1.x<br><span class="hljs-meta">#</span><span class="bash">devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span><br><span class="hljs-meta">#</span><span class="bash">使用 -D参数将依赖添加到devDependencies节点</span><br>npm install --save-dev eslint<br><span class="hljs-meta">#</span><span class="bash">或</span><br>npm install -D eslint<br><span class="hljs-meta">#</span><span class="bash">全局安装</span><br><span class="hljs-meta">#</span><span class="bash">Node.js全局安装的npm包和工具的位置：用户目录\AppData\Roaming\npm\node_modules</span><br><span class="hljs-meta">#</span><span class="bash">一些命令行工具常使用全局安装的方式</span><br>npm install -g webpack<br></code></pre></td></tr></table></figure><h3 id="八、其它命令"><a href="#八、其它命令" class="headerlink" title="八、其它命令"></a>八、其它命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#更新包（更新到最新版本）<br>npm update 包名<br>#全局更新<br>npm update -g 包名<br>#卸载包<br>npm uninstall 包名<br>#全局卸载<br>npm uninstall -g 包名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 连接(JOIN)</title>
    <link href="/cc343209.html"/>
    <url>/cc343209.html</url>
    
    <content type="html"><![CDATA[<h4 id="SQL-join-用于把来自两个或多个表的行结合起来。"><a href="#SQL-join-用于把来自两个或多个表的行结合起来。" class="headerlink" title="SQL join 用于把来自两个或多个表的行结合起来。"></a>SQL join 用于把来自两个或多个表的行结合起来。</h4><p>下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/sql-join.png" alt="sql-join"></p><p>有A、B、C三个标识的块，从三个取三个的组合，再从三个取两个的组合，再从三个取一个的组合，得到的结果相加</p><p>3+3+1 = 7，所以一共有七种。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/20210216105946.jpg" alt="20210216105946"></p><h4 id="INNER-Versus-OUTER-Joins-内连接和外连接"><a href="#INNER-Versus-OUTER-Joins-内连接和外连接" class="headerlink" title="INNER Versus OUTER Joins,内连接和外连接"></a>INNER Versus OUTER Joins,内连接和外连接</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/20210216121321.jpg" alt="20210216121321"></p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>MYSQL</tag>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud微服务配置（五）网关Geteway</title>
    <link href="/d6c639c2.html"/>
    <url>/d6c639c2.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、网关基本概念"><a href="#一、网关基本概念" class="headerlink" title="一、网关基本概念"></a>一、网关基本概念</h3><h4 id="1、API网关介绍"><a href="#1、API网关介绍" class="headerlink" title="1、API网关介绍"></a>1、API网关介绍</h4><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><p>（1）客户端会多次请求不同的微服务，增加了客户端的复杂性。</p><p>（2）存在跨域请求，在一定场景下处理相对复杂。</p><p>（3）认证复杂，每个服务都需要独立认证。</p><p>（4）难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。</p><p>（5）某些微服务可能使用了防火墙 / 浏览器不友好的协议，直接访问会有一定的困难。</p><p>以上这些问题可以借助 API 网关解决。API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性</p><h4 id="2、Spring-Cloud-Gateway"><a href="#2、Spring-Cloud-Gateway" class="headerlink" title="2、Spring Cloud Gateway"></a><strong>2、Spring Cloud Gateway</strong></h4><p><strong>Spring cloud gateway</strong>是spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控/埋点、限流等。</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123134436259.png" alt="image-20210123134436259"></p><h4 id="3、Spring-Cloud-Gateway核心概念"><a href="#3、Spring-Cloud-Gateway核心概念" class="headerlink" title="3、Spring Cloud Gateway核心概念"></a>3、Spring Cloud Gateway核心概念</h4><p>网关提供API全托管服务，丰富的API管理功能，辅助企业管理大规模的API，以降低管理成本和安全风险，包括协议适配、协议转发、安全策略、防刷、流量、监控日志等贡呢。一般来说网关对外暴露的URL或者接口信息，我们统称为路由信息。如果研发过网关中间件或者使用过Zuul的人，会知道网关的核心是Filter以及Filter Chain（Filter责任链）。Sprig Cloud Gateway也具有路由和Filter的概念。下面介绍一下Spring Cloud Gateway中几个重要的概念。</p><p>（1）路由。路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter组成。如果断言路由为真，则说明请求的URL和配置匹配</p><p>（2）断言。Java8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</p><p>（3）过滤器。一个标准的Spring webFilter。Spring cloud gateway中的filter分为两种类型的Filter，分别是Gateway Filter和Global Filter。过滤器Filter将会对请求和响应进行修改处理</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123140027510.png" alt="image-20210123140027510"></p><p>如上图所示，Spring cloud Gateway发出请求。然后再由Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway web handler。Handler再通过指定的过滤器链将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><h3 id="二、创建api-gateway模块（网关服务）"><a href="#二、创建api-gateway模块（网关服务）" class="headerlink" title="二、创建api-gateway模块（网关服务）"></a>二、创建api-gateway模块（网关服务）</h3><h4 id="1、在infrastructure模块下创建api-gateway模块"><a href="#1、在infrastructure模块下创建api-gateway模块" class="headerlink" title="1、在infrastructure模块下创建api_gateway模块"></a>1、在infrastructure模块下创建api_gateway模块</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123135040354.png" alt="image-20210123135040354"></p><h4 id="2、在pom-xml引入依赖"><a href="#2、在pom-xml引入依赖" class="headerlink" title="2、在pom.xml引入依赖"></a>2、在pom.xml引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--gson--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--服务调用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、编写application-properties配置文件"><a href="#3、编写application-properties配置文件" class="headerlink" title="3、编写application.properties配置文件"></a>3、编写application.properties配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8222</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-gateway</span><br><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><br><span class="hljs-comment">#使用服务发现路由</span><br><span class="hljs-meta">spring.cloud.gateway.discovery.locator.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#服务路由名小写</span><br><span class="hljs-comment">#spring.cloud.gateway.discovery.locator.lower-case-service-id=true</span><br><br><span class="hljs-comment">#设置路由id</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].id</span>=<span class="hljs-string">service-acl</span><br><span class="hljs-comment">#设置路由的uri</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].uri</span>=<span class="hljs-string">lb://service-acl</span><br><span class="hljs-comment">#设置路由断言,代理servicerId为auth-service的/auth/路径</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].predicates</span>= <span class="hljs-string">Path=/*/acl/**</span><br><br><span class="hljs-comment">#配置service-edu服务</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].id</span>=<span class="hljs-string">service-edu</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].uri</span>=<span class="hljs-string">lb://service-edu</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].predicates</span>= <span class="hljs-string">Path=/eduservice/**</span><br></code></pre></td></tr></table></figure><h5 id="yml文件："><a href="#yml文件：" class="headerlink" title="yml文件："></a>yml文件：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8222</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">SERVICE-ACL</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://SERVICE-ACL</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/*/acl/**</span> <span class="hljs-comment"># 路径匹配</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">SERVICE-EDU</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://SERVICE-EDU</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/eduservice/**</span> <span class="hljs-comment"># 路径匹配</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">SERVICE-UCENTER</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://SERVICE-UCENTER</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/ucenter/**</span> <span class="hljs-comment"># 路径匹配</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br></code></pre></td></tr></table></figure><h4 id="4、编写启动类"><a href="#4、编写启动类" class="headerlink" title="4、编写启动类"></a>4、编写启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiGatewayApplication</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(ApiGatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、网关相关配置"><a href="#三、网关相关配置" class="headerlink" title="三、网关相关配置"></a>三、网关相关配置</h2><h4 id="1、网关解决跨域问题"><a href="#1、网关解决跨域问题" class="headerlink" title="1、网关解决跨域问题"></a><strong>1、网关解决跨域问题</strong></h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123135323041.png" alt="image-20210123135323041"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();<br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource(<span class="hljs-keyword">new</span> PathPatternParser());<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、全局Filter，统一处理会员登录与外部不允许访问的服务"><a href="#2、全局Filter，统一处理会员登录与外部不允许访问的服务" class="headerlink" title="2、全局Filter，统一处理会员登录与外部不允许访问的服务"></a><strong>2、全局Filter，统一处理会员登录与外部不允许访问的服务</strong></h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123135346009.png" alt="image-20210123135346009"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.JsonObject;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.AntPathMatcher;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 全局Filter，统一处理会员登录与外部不允许访问的服务</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        ServerHttpRequest request = exchange.getRequest();<br>        String path = request.getURI().getPath();<br>        <span class="hljs-comment">//学院api接口，校验用户必须登录</span><br>        <span class="hljs-keyword">if</span>(antPathMatcher.match(<span class="hljs-string">&quot;/api/**/auth/**&quot;</span>, path)) &#123;<br>            List&lt;String&gt; tokenList = request.getHeaders().get(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == tokenList) &#123;<br>                ServerHttpResponse response = exchange.getResponse();<br>                <span class="hljs-keyword">return</span> out(response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//                Boolean isCheck = JwtUtils.checkToken(tokenList.get(0));</span><br><span class="hljs-comment">//                if(!isCheck) &#123;</span><br>                    ServerHttpResponse response = exchange.getResponse();<br>                    <span class="hljs-keyword">return</span> out(response);<br><span class="hljs-comment">//                &#125;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//内部服务接口，不允许外部访问</span><br>        <span class="hljs-keyword">if</span>(antPathMatcher.match(<span class="hljs-string">&quot;/**/inner/**&quot;</span>, path)) &#123;<br>            ServerHttpResponse response = exchange.getResponse();<br>            <span class="hljs-keyword">return</span> out(response);<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Mono&lt;Void&gt; <span class="hljs-title">out</span><span class="hljs-params">(ServerHttpResponse response)</span> </span>&#123;<br>        JsonObject message = <span class="hljs-keyword">new</span> JsonObject();<br>        message.addProperty(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">false</span>);<br>        message.addProperty(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">28004</span>);<br>        message.addProperty(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;鉴权失败&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] bits = message.toString().getBytes(StandardCharsets.UTF_8);<br>        DataBuffer buffer = response.bufferFactory().wrap(bits);<br>        <span class="hljs-comment">//response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br>        <span class="hljs-comment">//指定编码，否则在浏览器中会中文乱码</span><br>        response.getHeaders().add(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> response.writeWith(Mono.just(buffer));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3、自定义异常处理"><a href="#3、自定义异常处理" class="headerlink" title="3、自定义异常处理"></a><strong>3、自定义异常处理</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectProvider;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ResourceProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ServerProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.reactive.error.ErrorAttributes;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 覆盖默认的异常处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;ServerProperties.class, ResourceProperties.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorHandlerConfig</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerProperties serverProperties;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceProperties resourceProperties;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ErrorHandlerConfig</span><span class="hljs-params">(ServerProperties serverProperties,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     ResourceProperties resourceProperties,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        ServerCodecConfigurer serverCodecConfigurer,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serverProperties = serverProperties;<br>        <span class="hljs-keyword">this</span>.applicationContext = applicationContext;<br>        <span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;<br>        <span class="hljs-keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class="hljs-keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ErrorWebExceptionHandler <span class="hljs-title">errorWebExceptionHandler</span><span class="hljs-params">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        JsonExceptionHandler exceptionHandler = <span class="hljs-keyword">new</span> JsonExceptionHandler(<br>                errorAttributes,<br>                <span class="hljs-keyword">this</span>.resourceProperties,<br>                <span class="hljs-keyword">this</span>.serverProperties.getError(),<br>                <span class="hljs-keyword">this</span>.applicationContext);<br>        exceptionHandler.setViewResolvers(<span class="hljs-keyword">this</span>.viewResolvers);<br>        exceptionHandler.setMessageWriters(<span class="hljs-keyword">this</span>.serverCodecConfigurer.getWriters());<br>        exceptionHandler.setMessageReaders(<span class="hljs-keyword">this</span>.serverCodecConfigurer.getReaders());<br>        <span class="hljs-keyword">return</span> exceptionHandler;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>JsonExceptionHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.ResourceProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.reactive.error.ErrorAttributes;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.reactive.function.server.*;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义异常处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;异常时用JSON代替HTML异常信息&lt;p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonExceptionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultErrorWebExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JsonExceptionHandler</span><span class="hljs-params">(ErrorAttributes errorAttributes, ResourceProperties resourceProperties,</span></span><br><span class="hljs-function"><span class="hljs-params">                                ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(errorAttributes, resourceProperties, errorProperties, applicationContext);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取异常属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(ServerRequest request, <span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">false</span>);<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">20005</span>);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;网关失败&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定响应处理方法为JSON处理的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorAttributes</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="hljs-title">getRoutingFunction</span><span class="hljs-params">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> RouterFunctions.route(RequestPredicates.all(), <span class="hljs-keyword">this</span>::renderErrorResponse);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据code获取对应的HttpStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorAttributes</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> HttpStatus <span class="hljs-title">getHttpStatus</span><span class="hljs-params">(Map&lt;String, Object&gt; errorAttributes)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HttpStatus.OK;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装本地依赖包</title>
    <link href="/c0a43c51.html"/>
    <url>/c0a43c51.html</url>
    
    <content type="html"><![CDATA[<h3 id="已安装maven并且配置了环境变量"><a href="#已安装maven并且配置了环境变量" class="headerlink" title="已安装maven并且配置了环境变量"></a>已安装maven并且配置了环境变量</h3><p>1.进入jar包所在的目录，打开cmd<br>2.了解包的groupId、artifactId、version<br>3.输入命令（依赖sdk为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file -DgroupId=groupId -DartifactId=artifactId -Dversion=version -Dpackaging=jar -Dfile=jar包文件名<br></code></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123131435406.png" alt="image-20210123131435406"></p><p>会在使用的repository生成</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123131620609.png" alt="image-20210123131620609"></p><p>这时候可以使用了</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210123131647273.png" alt="image-20210123131647273"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus代码生成器</title>
    <link href="/350e175a.html"/>
    <url>/350e175a.html</url>
    
    <content type="html"><![CDATA[<p>MybatisPlus代码生成器</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 1、创建代码生成器</span><br>        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();<br><br>        <span class="hljs-comment">// 2、全局配置</span><br>        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();<br>        String projectPath = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        gc.setOutputDir(<span class="hljs-string">&quot;D:\\ideaProject\\xx_parent\\service\\service_edu&quot;</span> + <span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        gc.setAuthor(<span class="hljs-string">&quot;scping&quot;</span>);<br>        gc.setOpen(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//生成后是否打开资源管理器</span><br>        gc.setFileOverride(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//重新生成时文件是否覆盖</span><br>        gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<span class="hljs-comment">//去掉Service接口的首字母I</span><br>        gc.setIdType(IdType.ID_WORKER); <span class="hljs-comment">//主键策略</span><br>        gc.setDateType(DateType.ONLY_DATE);<span class="hljs-comment">//定义生成的实体类中日期类型</span><br>        gc.setSwagger2(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//开启Swagger2模式</span><br><br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 3、数据源配置</span><br>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/gdatabase?serverTimezone=GMT%2B8&quot;</span>);<br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setDbType(DbType.MYSQL);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 4、包配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();<br>        pc.setModuleName(<span class="hljs-string">&quot;eduservice&quot;</span>); <span class="hljs-comment">//模块名</span><br>        pc.setParent(<span class="hljs-string">&quot;com.javacgo&quot;</span>);<br>        pc.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        pc.setEntity(<span class="hljs-string">&quot;entity&quot;</span>);<br>        pc.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        pc.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 5、策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategy.setInclude(<span class="hljs-string">&quot;edu_course&quot;</span>,<span class="hljs-string">&quot;edu_course_description&quot;</span>,<span class="hljs-string">&quot;edu_video&quot;</span>,<span class="hljs-string">&quot;edu_chapter&quot;</span>);<br>        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="hljs-comment">//数据库表映射到实体的命名策略</span><br>        strategy.setTablePrefix(pc.getModuleName() + <span class="hljs-string">&quot;_&quot;</span>); <span class="hljs-comment">//生成实体时去掉表前缀</span><br><br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="hljs-comment">//数据库表字段映射到实体的命名策略</span><br>        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span><br><br>        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//restful api风格控制器</span><br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//url中驼峰转连字符</span><br><br>        mpg.setStrategy(strategy);<br><br><br>        <span class="hljs-comment">// 6、执行</span><br>        mpg.execute();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信登录（一）</title>
    <link href="/c1d87fb0.html"/>
    <url>/c1d87fb0.html</url>
    
    <content type="html"><![CDATA[<p><strong>微信登录遵循协议Aouth2.0中的授权码模式</strong></p><p>我们来看一下Aouth2.0中的授权码模式是怎么定义的：</p><p>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。<br>它的步骤如下：<a id="more"></a></p><p>（1）用户访问客户端登录页面，后者将前者导向认证服务器。</p><p>（2）用户选择是否给予客户端授权。</p><p>（3）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI，<strong>回调地址</strong>），同时附上一个授权码。</p><p>（4）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p><p>（5）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）</p><h4 id="1、配置application-properties"><a href="#1、配置application-properties" class="headerlink" title="1、配置application.properties"></a>1、配置application.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">wx.open.app_id=wxed999999999999<br><br>wx.open.app_secret=a77777777777777777777<br><br>wx.open.redirect_url=http://回调/api/ucenter/wx/callback<br></code></pre></td></tr></table></figure><h4 id="2、编写数据类ConstantWxUtils-java"><a href="#2、编写数据类ConstantWxUtils-java" class="headerlink" title="2、编写数据类ConstantWxUtils.java"></a>2、编写数据类ConstantWxUtils.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstantWxUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.app_id&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.app_secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appSecret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.redirect_url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String redirectUrl;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_APP_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_APP_SECRET;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_REDIRECT_URL;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        WX_OPEN_APP_ID = appId;<br>        WX_OPEN_APP_SECRET = appSecret;<br>        WX_OPEN_REDIRECT_URL = redirectUrl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、编写controller"><a href="#3、编写controller" class="headerlink" title="3、编写controller"></a>3、编写controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@Controller</span>  <span class="hljs-comment">//只是请求地址，不需要返回数据</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/ucenter/wx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WxApiController</span> </span>&#123;<br>    <span class="hljs-comment">//1 生成微信扫描二维码</span><br>    <span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWxCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//固定地址，后面拼接参数</span><br><span class="hljs-comment">//        String url = &quot;https://open.weixin.qq.com/&quot; +</span><br><span class="hljs-comment">//                &quot;connect/qrconnect?appid=&quot;+ ConstantWxUtils.WX_OPEN_APP_ID+&quot;&amp;response_type=code&quot;;</span><br><br>        <span class="hljs-comment">// 微信开放平台授权baseUrl  %s相当于?代表占位符</span><br>        String baseUrl = <span class="hljs-string">&quot;https://open.weixin.qq.com/connect/qrconnect&quot;</span> +<br>                <span class="hljs-string">&quot;?appid=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;redirect_uri=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;response_type=code&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;scope=snsapi_login&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;state=%s&quot;</span> +<br>                <span class="hljs-string">&quot;#wechat_redirect&quot;</span>;<br><br>        <span class="hljs-comment">//对redirect_url进行URLEncoder编码</span><br>        String redirectUrl = ConstantWxUtils.WX_OPEN_REDIRECT_URL;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redirectUrl = URLEncoder.encode(redirectUrl, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-comment">//设置%s里面值</span><br>        String url = String.format(<br>                    baseUrl,<br>                    ConstantWxUtils.WX_OPEN_APP_ID,<br>                    redirectUrl,<br>                    <span class="hljs-string">&quot;atguigu&quot;</span><br>                 );<br><br>        <span class="hljs-comment">//重定向到请求微信地址里面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span>+url;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-回调callback"><a href="#4-回调callback" class="headerlink" title="4.回调callback"></a>4.回调callback</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callback</span><span class="hljs-params">(String code, String state)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1 获取code值，临时票据，类似于验证码</span><br>            <span class="hljs-comment">//2 拿着code请求 微信固定的地址，得到两个值 accsess_token 和 openid</span><br>            String baseAccessTokenUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span> +<br>                    <span class="hljs-string">&quot;?appid=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;secret=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;code=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>;<br>            <span class="hljs-comment">//拼接三个参数 ：id  秘钥 和 code值</span><br>            String accessTokenUrl = String.format(<br>                    baseAccessTokenUrl,<br>                    ConstantWxUtils.WX_OPEN_APP_ID,<br>                    ConstantWxUtils.WX_OPEN_APP_SECRET,<br>                    code<br>            );<br>            <span class="hljs-comment">//请求这个拼接好的地址，得到返回两个值 accsess_token 和 openid</span><br>            <span class="hljs-comment">//使用httpclient发送请求，得到返回结果</span><br>            String accessTokenInfo = HttpClientUtils.get(accessTokenUrl);<br><br>            <span class="hljs-comment">//从accessTokenInfo字符串获取出来两个值 accsess_token 和 openid</span><br>            <span class="hljs-comment">//把accessTokenInfo字符串转换map集合，根据map里面key获取对应值</span><br>            <span class="hljs-comment">//使用json转换工具 Gson</span><br>            Gson gson = <span class="hljs-keyword">new</span> Gson();<br>            HashMap mapAccessToken = gson.fromJson(accessTokenInfo, HashMap.class);<br>            String access_token = (String)mapAccessToken.get(<span class="hljs-string">&quot;access_token&quot;</span>);<br>            String openid = (String)mapAccessToken.get(<span class="hljs-string">&quot;openid&quot;</span>);<br><br>            <span class="hljs-comment">//把扫描人信息添加数据库里面</span><br>            <span class="hljs-comment">//判断数据表里面是否存在相同微信信息，根据openid判断</span><br>            UcenterMember member = memberService.getOpenIdMember(openid);<br>            <span class="hljs-keyword">if</span>(member == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//memeber是空，表没有相同微信数据，进行添加</span><br><br>                <span class="hljs-comment">//3 拿着得到accsess_token 和 openid，再去请求微信提供固定的地址，获取到扫描人信息</span><br>                <span class="hljs-comment">//访问微信的资源服务器，获取用户信息</span><br>                String baseUserInfoUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +<br>                        <span class="hljs-string">&quot;?access_token=%s&quot;</span> +<br>                        <span class="hljs-string">&quot;&amp;openid=%s&quot;</span>;<br>                <span class="hljs-comment">//拼接两个参数</span><br>                String userInfoUrl = String.format(<br>                        baseUserInfoUrl,<br>                        access_token,<br>                        openid<br>                );<br>                <span class="hljs-comment">//发送请求</span><br>                String userInfo = HttpClientUtils.get(userInfoUrl);<br>                <span class="hljs-comment">//获取返回userinfo字符串扫描人信息</span><br>                HashMap userInfoMap = gson.fromJson(userInfo, HashMap.class);<br>                String nickname = (String)userInfoMap.get(<span class="hljs-string">&quot;nickname&quot;</span>);<span class="hljs-comment">//昵称</span><br>                String headimgurl = (String)userInfoMap.get(<span class="hljs-string">&quot;headimgurl&quot;</span>);<span class="hljs-comment">//头像</span><br><br>                member = <span class="hljs-keyword">new</span> UcenterMember();<br>                member.setOpenid(openid);<br>                member.setNickname(nickname);<br>                member.setAvatar(headimgurl);<br>                memberService.save(member);<br>            &#125;<br><br><br>            <span class="hljs-comment">//使用jwt根据member对象生成token字符串</span><br>            String jwtToken = JwtUtils.getJwtToken(member.getId(), member.getNickname());<br>            <span class="hljs-comment">//最后：返回首页面，通过路径传递token字符串</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost:3000?token=&quot;</span>+jwtToken;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth2（二）</title>
    <link href="/896b0bc8.html"/>
    <url>/896b0bc8.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是OAuth2"><a href="#一、什么是OAuth2" class="headerlink" title="一、什么是OAuth2"></a>一、什么是OAuth2</h3><h4 id="1、OAuth2正式定义"><a href="#1、OAuth2正式定义" class="headerlink" title="1、OAuth2正式定义"></a>1、OAuth2正式定义</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210112220.png" alt="image-20210120210112220"></p><h4 id="2、令牌的核心"><a href="#2、令牌的核心" class="headerlink" title="2、令牌的核心"></a>2、令牌的核心</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210131556.png" alt="image-20210120210131556"></p><h4 id="3、OAuth2的历史"><a href="#3、OAuth2的历史" class="headerlink" title="3、OAuth2的历史"></a>3、<strong>OAuth2的历史</strong></h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210158143.png" alt="image-20210120210158143"></p><h4 id="4、OAuth2的优势"><a href="#4、OAuth2的优势" class="headerlink" title="4、OAuth2的优势"></a>4、OAuth2的优势</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210214516.png" alt="image-20210120210214516"></p><h4 id="5、OAuth2的不足"><a href="#5、OAuth2的不足" class="headerlink" title="5、OAuth2的不足"></a>5、OAuth2的不足</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210227318.png" alt="image-20210120210227318"></p><h4 id="6、Auth2涉及的角色"><a href="#6、Auth2涉及的角色" class="headerlink" title="6、Auth2涉及的角色"></a>6、Auth2涉及的角色</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210239995.png" alt="image-20210120210239995"></p><h4 id="7、OAuth2术语"><a href="#7、OAuth2术语" class="headerlink" title="7、OAuth2术语"></a>7、OAuth2术语</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210251627.png" alt="image-20210120210251627"></p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210257219.png" alt="image-20210120210257219"></p><h4 id="8、OAuth2令牌的类型"><a href="#8、OAuth2令牌的类型" class="headerlink" title="8、OAuth2令牌的类型"></a>8、OAuth2令牌的类型</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210310368.png" alt="image-20210120210310368"></p><h4 id="9、OAuth2的误解"><a href="#9、OAuth2的误解" class="headerlink" title="9、OAuth2的误解"></a>9、OAuth2的误解</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210322695.png" alt="image-20210120210322695"></p><h3 id="二、回顾"><a href="#二、回顾" class="headerlink" title="二、回顾"></a>二、回顾</h3><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120210334510.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OAuth2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth2（一）</title>
    <link href="/64d2c350.html"/>
    <url>/64d2c350.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、OAuth2解决什么问题"><a href="#一、OAuth2解决什么问题" class="headerlink" title="一、OAuth2解决什么问题"></a>一、OAuth2解决什么问题</h3><h4 id="1、OAuth2提出的背景"><a href="#1、OAuth2提出的背景" class="headerlink" title="1、OAuth2提出的背景"></a>1、OAuth2提出的背景</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/100bc1f9-5d9e-4600-9b2b-e3eb7ad7d9c5.jpg" alt="100bc1f9-5d9e-4600-9b2b-e3eb7ad7d9c5"></p><h4 id="2、图例"><a href="#2、图例" class="headerlink" title="2、图例"></a>2、图例</h4><p>资源拥有者：照片拥有者</p><p>客户应用：云冲印</p><p>受保护的资源：照片</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/f1b879ec-1c76-42bc-991b-d68c140b4e49.jpg" alt="f1b879ec-1c76-42bc-991b-d68c140b4e49"></p><h4 id="3、方式一：用户名密码复制"><a href="#3、方式一：用户名密码复制" class="headerlink" title="3、方式一：用户名密码复制"></a>3、方式一：用户名密码复制</h4><p>适用于同一公司内部的多个系统，不适用于不受信的第三方应用</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/f57f30af-3bdd-4c5d-b4d3-f934b4f9f608.jpg" alt="f57f30af-3bdd-4c5d-b4d3-f934b4f9f608"></p><h4 id="4、方式二：通用开发者key"><a href="#4、方式二：通用开发者key" class="headerlink" title="4、方式二：通用开发者key"></a>4、方式二：通用开发者key</h4><p>适用于合作商或者授信的不同业务部门之间</p><p><img src="C:%5CUsers%5Czxl%5CDesktop%5C959b118f-62e0-452c-bcbe-6ba6e6c5f9af.jpg" alt="959b118f-62e0-452c-bcbe-6ba6e6c5f9af"></p><h4 id="5、方式三：办法令牌"><a href="#5、方式三：办法令牌" class="headerlink" title="5、方式三：办法令牌"></a>5、方式三：办法令牌</h4><p>接近OAuth2方式，需要考虑如何管理令牌、颁发令牌、吊销令牌，需要统一的协议，因此就有了OAuth2协议</p><p> <img src="https://gitee.com/mathwm/picBed/raw/master/e6c08180-79bc-4804-8c7b-e371ab168bb5.jpg" alt="e6c08180-79bc-4804-8c7b-e371ab168bb5"></p><h3 id="二、现代微服务安全"><a href="#二、现代微服务安全" class="headerlink" title="二、现代微服务安全"></a>二、现代微服务安全</h3><p>除了开放系统授权，OAuth2还可以应用于现代微服务安全</p><h4 id="1、传统单块应用的安全"><a href="#1、传统单块应用的安全" class="headerlink" title="1、传统单块应用的安全"></a>1、传统单块应用的安全</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120205343113.png" alt="image-20210120205343113"></p><h4 id="2、现代微服务安全"><a href="#2、现代微服务安全" class="headerlink" title="2、现代微服务安全"></a>2、现代微服务安全</h4><p>现代微服务中系统微服务化以及应用的形态和设备类型增多，不能用传统的登录方式</p><p>核心的技术不是用户名和密码，而是token，由AuthServer颁发token，用户使用token进行登录</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120205403225.png" alt="image-20210120205403225"></p><h4 id="3、典型的OAuth2应用"><a href="#3、典型的OAuth2应用" class="headerlink" title="3、典型的OAuth2应用"></a>3、典型的OAuth2应用</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120205417990.png" alt="image-20210120205417990"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p><img src="https://gitee.com/mathwm/picBed/raw/master/image-20210120205430501.png" alt="image-20210120205430501"></p><h3 id="四、OAuth2最简向导"><a href="#四、OAuth2最简向导" class="headerlink" title="四、OAuth2最简向导"></a><strong>四、</strong>OAuth2最简向导</h3><p>川崎高彦：OAuth2领域专家，开发了一个OAuth2 sass服务，OAuth2 as Service，并且做成了一个公司</p><p>再融资的过程中为了向投资人解释OAuth2是什么，于是写了一篇文章，《OAuth2最简向导》</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OAuth2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页系统登录流程</title>
    <link href="/d2017093.html"/>
    <url>/d2017093.html</url>
    
    <content type="html"><![CDATA[<h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><p>(1)调用接口登录<strong>返回token字符串</strong></p><p>后端JAVA代码实例如下<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录</span><br>    <span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">loginUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UcenterMember member)</span> </span>&#123;<br>        <span class="hljs-comment">//member对象封装手机号和密码</span><br>        <span class="hljs-comment">//调用service方法实现登录</span><br>        <span class="hljs-comment">//返回token值，使用jwt生成</span><br>        String token = memberService.login(member);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;token&quot;</span>,token);<br>    &#125;<br><span class="hljs-comment">//根据token获取用户信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;getMemberInfo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getMemberInfo</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-comment">//调用jwt工具类的方法。根据request对象获取头信息，返回用户id</span><br>        String memberId = JwtUtils.getMemberIdByJwtToken(request);<br>        <span class="hljs-comment">//查询数据库根据用户id获取用户信息</span><br>        UcenterMember member = memberService.getById(memberId);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;userInfo&quot;</span>,member);<br>    &#125;<br></code></pre></td></tr></table></figure><p>(2)把返回的字符串放入cooket里面</p><p>【注】：用到  import cookie from <strong>‘js-cookie’</strong> </p><p>前端nuxt+vue代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>      <span class="hljs-function"><span class="hljs-title">submitLogin</span>(<span class="hljs-params"></span>)</span>&#123;<br>        loginApi.submitLoginUser(<span class="hljs-built_in">this</span>.user)<br>        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>           <span class="hljs-comment">//第二步 获取token字符串放到cookie里面</span><br>           <span class="hljs-comment">//第一个参数cookie名称，第二个参数值，第三个参数作用范围</span><br>          cookie.set(<span class="hljs-string">&#x27;jilu_token&#x27;</span>,response.data.data.token,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>          loginApi.getLoginUserInfo()<br>          .then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>            <span class="hljs-comment">//</span><br>            <span class="hljs-built_in">this</span>.loginInfo = response.data.data.userInfo<br>            <span class="hljs-comment">//获取返回用户信息，放到cookie里面</span><br>            cookie.set(<span class="hljs-string">&#x27;jili_ucenter&#x27;</span>,<span class="hljs-built_in">this</span>.loginInfo,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>            <span class="hljs-comment">//跳转页面</span><br>            <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/&quot;</span>;<br>          &#125;)<br>        &#125;)<br>      &#125;,<br></code></pre></td></tr></table></figure><p>(3)创建前端拦截器，判断cookie里面是否有token字符串，如果有，把token字符串放入header(请求头)</p><p>前端nuxt+vue代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> cookie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;js-cookie&#x27;</span><br><span class="hljs-keyword">import</span> &#123;MessageBox,Message&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  baseURL: <span class="hljs-string">&#x27;http://localhost:9001&#x27;</span>, <span class="hljs-comment">// api的base_url</span><br>  timeout: <span class="hljs-number">20000</span> <span class="hljs-comment">// 请求超时时间</span><br>&#125;)<br><br>service.interceptors.request.use(<br>  config =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(cookie.get(<span class="hljs-string">&#x27;jilu_token&#x27;</span>))&#123;<br>      config.headers[<span class="hljs-string">&#x27;token&#x27;</span>] = cookie.get(<span class="hljs-string">&#x27;guli_token&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  err =&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(err);<br>  &#125;<br>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><p>(4)根据token值，调用接口，根据token获取用户信息，为了首页显示，<strong>把调用接口返回用户信息放在cookie里面</strong></p><p>前端nuxt+vue代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>      <span class="hljs-function"><span class="hljs-title">submitLogin</span>(<span class="hljs-params"></span>)</span>&#123;<br>        loginApi.submitLoginUser(<span class="hljs-built_in">this</span>.user)<br>        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>           <span class="hljs-comment">//第二步 获取token字符串放到cookie里面</span><br>           <span class="hljs-comment">//第一个参数cookie名称，第二个参数值，第三个参数作用范围</span><br>          cookie.set(<span class="hljs-string">&#x27;jilu_token&#x27;</span>,response.data.data.token,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>          loginApi.getLoginUserInfo()<br>          .then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>            <span class="hljs-comment">//</span><br>            <span class="hljs-built_in">this</span>.loginInfo = response.data.data.userInfo<br>            <span class="hljs-comment">//获取返回用户信息，放到cookie里面</span><br>            cookie.set(<span class="hljs-string">&#x27;jilu_ucenter&#x27;</span>,<span class="hljs-built_in">this</span>.loginInfo,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>            <span class="hljs-comment">//跳转页面</span><br>            <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/&quot;</span>;<br>          &#125;)<br>        &#125;)<br>      &#125;,<br></code></pre></td></tr></table></figure><p>(5)从首页显示用户信息</p><p>前端nuxt+vue代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        token:<span class="hljs-string">&#x27;&#x27;</span>,<br>        loginInfo: &#123;<br>          id: <span class="hljs-string">&#x27;&#x27;</span>,<br>          age: <span class="hljs-string">&#x27;&#x27;</span>,<br>          avatar: <span class="hljs-string">&#x27;&#x27;</span>,<br>          mobile: <span class="hljs-string">&#x27;&#x27;</span>,<br>          nickname: <span class="hljs-string">&#x27;&#x27;</span>,<br>          sex: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>     <span class="hljs-built_in">this</span>.showInfo()<br>  &#125;,<br>  methods:&#123;<br>      <span class="hljs-comment">//创建方法，从cookie获取用户信息</span><br>    <span class="hljs-function"><span class="hljs-title">showInfo</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//从cookie获取用户信息</span><br>    <span class="hljs-keyword">var</span> userStr = cookie.get(<span class="hljs-string">&#x27;jilu_ucenter&#x27;</span>)<br>    <span class="hljs-comment">// 把字符串转换json对象(js对象)</span><br>    <span class="hljs-keyword">if</span>(userStr) &#123;<br>      <span class="hljs-built_in">this</span>.loginInfo = <span class="hljs-built_in">JSON</span>.parse(userStr)<br>      &#125;<br>    &#125;,<br>     <span class="hljs-comment">//退出</span><br>    <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//清空cookie值</span><br>      cookie.set(<span class="hljs-string">&#x27;jilu_token&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>      cookie.set(<span class="hljs-string">&#x27;jilu_ucenter&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,&#123;<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>&#125;)<br>      <span class="hljs-comment">//回到首页面</span><br>      <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>  &#125;,<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JWT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript 6.0（一）</title>
    <link href="/7af56f75.html"/>
    <url>/7af56f75.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、ECMAScript-6-简介"><a href="#一、ECMAScript-6-简介" class="headerlink" title="一、ECMAScript 6 简介"></a>一、ECMAScript 6 简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h4 id="1、ECMAScript-和-JavaScript-的关系"><a href="#1、ECMAScript-和-JavaScript-的关系" class="headerlink" title="1、ECMAScript 和 JavaScript 的关系"></a>1、ECMAScript 和 JavaScript 的关系</h4><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p><h4 id="2、ES6-与-ECMAScript-2015-的关系"><a href="#2、ES6-与-ECMAScript-2015-的关系" class="headerlink" title="2、ES6 与 ECMAScript 2015 的关系"></a>2、ES6 与 ECMAScript 2015 的关系</h4><p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p><p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p><p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。</p><p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p><p>本部分只学习前端开发中ES6的最少必要知识，方便后面项目开发中对代码的理解。</p><h4 id="1、let声明变量"><a href="#1、let声明变量" class="headerlink" title="1、let声明变量"></a>1、let声明变量</h4><p>创建 let.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var 声明的变量没有局部作用域</span><br><span class="hljs-comment">// let 声明的变量  有局部作用域</span><br>&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a)  <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// ReferenceError: b is not defined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var 可以声明多次</span><br><span class="hljs-comment">// let 只能声明一次</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">2</span><br><span class="hljs-keyword">let</span> n = <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> n = <span class="hljs-number">4</span><br><span class="hljs-built_in">console</span>.log(m)  <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(n)  <span class="hljs-comment">// Identifier &#x27;n&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h4 id="2、const声明常量（只读变量）"><a href="#2、const声明常量（只读变量）" class="headerlink" title="2、const声明常量（只读变量）"></a><strong>2、const声明常量（只读变量）</strong></h4><p>创建 const.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、声明之后不允许改变    </span><br><span class="hljs-keyword">const</span> PI = <span class="hljs-string">&quot;3.1415926&quot;</span><br>PI = <span class="hljs-number">3</span>  <span class="hljs-comment">// TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2、一但声明必须初始化，否则会报错</span><br><span class="hljs-keyword">const</span> MY_AGE  <span class="hljs-comment">// SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><h4 id="3、解构赋值"><a href="#3、解构赋值" class="headerlink" title="3、解构赋值"></a>3、<strong>解构赋值</strong></h4><p>创建 解构赋值.html</p><p>解构赋值是对赋值运算符的扩展。</p><p>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、数组解构</span><br><span class="hljs-comment">// 传统</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>, c = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(a, b, c)<br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">let</span> [x, y, z] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(x, y, z)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//2、对象解构</span><br><span class="hljs-keyword">let</span> user = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Helen&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-comment">// 传统</span><br><span class="hljs-keyword">let</span> name1 = user.name<br><span class="hljs-keyword">let</span> age1 = user.age<br><span class="hljs-built_in">console</span>.log(name1, age1)<br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">let</span> &#123; name, age &#125; =  user<span class="hljs-comment">//注意：结构的变量必须是user中的属性</span><br><span class="hljs-built_in">console</span>.log(name, age)<br></code></pre></td></tr></table></figure><h4 id="4、模板字符串"><a href="#4、模板字符串" class="headerlink" title="4、模板字符串"></a>4、模板字符串</h4><p>创建 模板字符串.html</p><p>模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、多行字符串</span><br><span class="hljs-keyword">let</span> string1 =  <span class="hljs-string">`Hey,</span><br><span class="hljs-string">can you stop angry now?`</span><br><span class="hljs-built_in">console</span>.log(string1)<br><span class="hljs-comment">// Hey,</span><br><span class="hljs-comment">// can you stop angry now?</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2、字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;Mike&quot;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">27</span><br><span class="hljs-keyword">let</span> info = <span class="hljs-string">`My Name is <span class="hljs-subst">$&#123;name&#125;</span>,I am <span class="hljs-subst">$&#123;age+<span class="hljs-number">1</span>&#125;</span> years old next year.`</span><br><span class="hljs-built_in">console</span>.log(info)<br><span class="hljs-comment">// My Name is Mike,I am 28 years old next year.</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 3、字符串中调用函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;have fun!&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> string2 = <span class="hljs-string">`Game start,<span class="hljs-subst">$&#123;f()&#125;</span>`</span><br><span class="hljs-built_in">console</span>.log(string2);  <span class="hljs-comment">// Game start,have fun!</span><br></code></pre></td></tr></table></figure><h4 id="5、声明对象简写"><a href="#5、声明对象简写" class="headerlink" title="5、声明对象简写"></a>5、声明对象简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> age = <span class="hljs-number">12</span><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Amy&quot;</span><br><br><span class="hljs-comment">// 传统</span><br><span class="hljs-keyword">const</span> person1 = &#123;<span class="hljs-attr">age</span>: age, <span class="hljs-attr">name</span>: name&#125;<br><span class="hljs-built_in">console</span>.log(person1)<br><br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">const</span> person2 = &#123;age, name&#125;<br><span class="hljs-built_in">console</span>.log(person2) <span class="hljs-comment">//&#123;age: 12, name: &quot;Amy&quot;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6、定义方法简写"><a href="#6、定义方法简写" class="headerlink" title="6、定义方法简写"></a>6、定义方法简写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传统</span><br><span class="hljs-keyword">const</span> person1 = &#123;<br>    sayHi:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>)<br>    &#125;<br>&#125;<br>person1.sayHi();<span class="hljs-comment">//&quot;Hi&quot;</span><br><br><br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">const</span> person2 = &#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>)<br>    &#125;<br>&#125;<br>person2.sayHi()  <span class="hljs-comment">//&quot;Hi&quot;</span><br></code></pre></td></tr></table></figure><h4 id="7、对象拓展运算符"><a href="#7、对象拓展运算符" class="headerlink" title="7、对象拓展运算符"></a>7、对象拓展运算符</h4><p>创建 对象拓展运算符.html</p><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、拷贝对象</span><br><span class="hljs-keyword">let</span> person1 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Amy&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">15</span>&#125;<br><span class="hljs-keyword">let</span> someone = &#123; ...person1 &#125;<br><span class="hljs-built_in">console</span>.log(someone)  <span class="hljs-comment">//&#123;name: &quot;Amy&quot;, age: 15&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2、合并对象</span><br><span class="hljs-keyword">let</span> age = &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">15</span>&#125;<br><span class="hljs-keyword">let</span> name = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Amy&quot;</span>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;...age, ...name&#125;<br><span class="hljs-built_in">console</span>.log(person2)  <span class="hljs-comment">//&#123;age: 15, name: &quot;Amy&quot;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="8、箭头函数"><a href="#8、箭头函数" class="headerlink" title="8、箭头函数"></a><strong>8、箭头函数</strong></h4><p>创建 箭头函数.html</p><p>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">参数 =&gt; 返回数据的函数体<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传统</span><br><span class="hljs-keyword">var</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-built_in">console</span>.log(f1(<span class="hljs-number">1</span>))<br><br><br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">var</span> f2 = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a<br><span class="hljs-built_in">console</span>.log(f2(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当箭头函数没有参数或者有多个参数，要用 () 括起来。</span><br><span class="hljs-comment">// 当箭头函数函数体有多行语句，用 &#123;&#125; 包裹起来，表示代码块，</span><br><span class="hljs-comment">// 当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span><br><span class="hljs-keyword">var</span> f3 = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> result = a+b<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-built_in">console</span>.log(f3(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>))  <span class="hljs-comment">// 8</span><br><br><span class="hljs-comment">// 前面代码相当于：</span><br><span class="hljs-keyword">var</span> f4 = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a+b<br></code></pre></td></tr></table></figure><p>箭头函数多用于匿名函数的定义</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Es6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JWT使用</title>
    <link href="/8d17cdf0.html"/>
    <url>/8d17cdf0.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、使用JWT进行跨域身份验证"><a href="#一、使用JWT进行跨域身份验证" class="headerlink" title="一、使用JWT进行跨域身份验证"></a>一、使用JWT进行跨域身份验证</h3><h4 id="1、传统用户身份验证"><a href="#1、传统用户身份验证" class="headerlink" title="1、传统用户身份验证"></a>1、传统用户身份验证</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/477b0567-90b8-435b-b51c-5a13b91ac59b.jpg" alt="477b0567-90b8-435b-b51c-5a13b91ac59b"></p><p>Internet服务无法与用户身份验证分开。一般过程如下：</p><ol><li>用户向服务器发送用户名和密码。</li><li>验证服务器后，相关数据（如用户角色，登录时间等）将保存在当前会话中。</li><li>服务器向用户返回session_id，session信息都会写入到用户的Cookie。</li><li>用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</li><li>服务器收到session_id并对比之前保存的数据，确认用户的身份。</li></ol><p>这种模式最大的问题是，没有分布式架构，无法支持横向扩展。</p><h4 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a><strong>2、解决方案</strong></h4><ol><li>session广播</li><li>将透明令牌存入cookie，将用户身份信息存入redis</li></ol><p><strong>另外一种灵活的解决方案：</strong></p><p>使用自包含令牌，通过客户端保存数据，而服务器不保存会话数据。 JWT是这种解决方案的代表。</p><h3 id="二、JWT令牌"><a href="#二、JWT令牌" class="headerlink" title="二、JWT令牌"></a>二、JWT令牌</h3><h4 id="1、访问令牌的类型"><a href="#1、访问令牌的类型" class="headerlink" title="1、访问令牌的类型"></a>1、访问令牌的类型</h4><p><img src="https://gitee.com/mathwm/picBed/raw/master/4c5b3db1-6052-441b-8384-8800fa4c288a.jpg" alt="4c5b3db1-6052-441b-8384-8800fa4c288a"></p><h4 id="2、JWT的组成"><a href="#2、JWT的组成" class="headerlink" title="2、JWT的组成"></a>2、JWT的组成</h4><p>典型的，一个JWT看起来如下图：</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/e3d41db5-686c-4deb-945b-5c6bc76658c3.png" alt="e3d41db5-686c-4deb-945b-5c6bc76658c3"></p><p>该对象为一个很长的字符串，字符之间通过”.”分隔符分为三个子串。</p><p>每一个子串表示了一个功能块，总共有以下三个部分：JWT头、有效载荷和签名</p><h5 id="JWT头"><a href="#JWT头" class="headerlink" title="JWT头"></a><strong>JWT头</strong></h5><p>JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<br>  <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</p><h5 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a><strong>有效载荷</strong></h5><p>有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex">iss：发行人<br>exp：到期时间<br>sub：主题<br>aud：用户<br>nbf：在此之前不可用<br>iat：发布时间<br>jti：JWT ID用于标识该JWT<br></code></pre></td></tr></table></figure><p>除以上默认字段外，我们还可以自定义私有字段，如下例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Helen&quot;</span>,<br>  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p><p>JSON对象也使用Base64 URL算法转换为字符串保存。</p><h5 id="签名哈希"><a href="#签名哈希" class="headerlink" title="签名哈希"></a><strong>签名哈希</strong></h5><p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p><p>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HMACSHA256(base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> + base64UrlEncode(claims), secret)<br></code></pre></td></tr></table></figure><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个<strong>JWT对象</strong>。</p><h5 id="Base64URL算法"><a href="#Base64URL算法" class="headerlink" title="Base64URL算法"></a><strong>Base64URL算法</strong></h5><p>如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。</p><p>作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是”+”，”/“和”=”，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：”=”去掉，”+”用”-“替换，”/“用”_”替换，这就是Base64URL算法。</p><h4 id="3、JWT的原则"><a href="#3、JWT的原则" class="headerlink" title="3、JWT的原则"></a>3、JWT的原则</h4><p>JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Helen&quot;</span>,<br>  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>之后，当用户与服务器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标识用户。为了防止用户篡改数据，服务器将在生成对象时添加签名。</p><p>服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。</p><h4 id="4、JWT的用法"><a href="#4、JWT的用法" class="headerlink" title="4、JWT的用法"></a>4、JWT的用法</h4><p>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。</p><p>此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的Header Authorization字段中。当跨域时，也可以将JWT被放置于POST请求的数据主体中。</p><h4 id="5、JWT问题和趋势"><a href="#5、JWT问题和趋势" class="headerlink" title="5、JWT问题和趋势"></a>5、JWT问题和趋势</h4><ul><li>JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</li><li>生产的token可以包含基本信息，比如id、用户昵称、头像等信息，避免再次查库</li><li>存储在客户端，不占用服务端的内存资源</li></ul><ul><li>JWT默认不加密，但可以加密。生成原始令牌后，可以再次对其进行加密。</li><li>当JWT未加密时，一些私密数据无法通过JWT传输。</li><li>JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</li><li>JWT本身包含认证信息，token是经过base64编码，所以可以解码，因此token加密前的对象不应该包含敏感信息，一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。</li><li>为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li></ul><h3 id="三、整合JWT令牌"><a href="#三、整合JWT令牌" class="headerlink" title="三、整合JWT令牌"></a>三、整合JWT令牌</h3><h4 id="1、在common-utils模块中添加jwt工具依赖"><a href="#1、在common-utils模块中添加jwt工具依赖" class="headerlink" title="1、在common_utils模块中添加jwt工具依赖"></a>1、在common_utils模块中添加jwt工具依赖</h4><p>在pom中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JWT--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建JWT工具类"><a href="#2、创建JWT工具类" class="headerlink" title="2、创建JWT工具类"></a>2、创建JWT工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jws;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> EXPIRE = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String APP_SECRET = <span class="hljs-string">&quot;Y6pZFfWus2jZWLPHOukc8BDbRigUDa&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJwtToken</span><span class="hljs-params">(String id, String nickname)</span></span>&#123;<br><br>        String JwtToken = Jwts.builder()<br>                .setHeaderParam(<span class="hljs-string">&quot;typ&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)<br>                .setHeaderParam(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>)<br>                .setSubject(<span class="hljs-string">&quot;jilu-user&quot;</span>)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + EXPIRE))<br>                .claim(<span class="hljs-string">&quot;id&quot;</span>, id)<br>                .claim(<span class="hljs-string">&quot;nickname&quot;</span>, nickname)<br>                .signWith(SignatureAlgorithm.HS256, APP_SECRET)<br>                .compact();<br><br>        <span class="hljs-keyword">return</span> JwtToken;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断token是否存在与有效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkToken</span><span class="hljs-params">(String jwtToken)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断token是否存在与有效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkToken</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String jwtToken = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据token获取会员id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getMemberIdByJwtToken</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String jwtToken = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        Claims claims = claimsJws.getBody();<br>        <span class="hljs-keyword">return</span> (String)claims.get(<span class="hljs-string">&quot;id&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JWT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo入坑指南（五）配置文件详解</title>
    <link href="/a1c442ab.html"/>
    <url>/a1c442ab.html</url>
    
    <content type="html"><![CDATA[<p>【注】:这里markdown<strong>表格如果不成功</strong>，是<strong>中英文输入法</strong>的”<strong>|</strong>“和”<strong>|</strong>“不同</p><p>Hexo 是一款优秀的博客框架，在使用 Hexo 搭建一个属于自己的博客网站后，我们还需要对其进行配置，使得 Hexo 更能满足自己的需求</p><p>这里所说的配置文件，是位于站点根目录下的 <code>_config.yml</code> 文件，可以直接用记事本打开进行编辑，文件中的具体配置项如下：</p><h3 id="1、Site"><a href="#1、Site" class="headerlink" title="1、Site"></a>1、Site</h3><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站关键字</td></tr><tr><td>author</td><td>网站作者</td></tr><tr><td>language</td><td>网站使用的语言，默认是<code>en</code> ，中文网站填<code>zh-Hans</code></td></tr><tr><td>timezone</td><td>网站使用的时区，默认为 <code>计算机的预设置</code>，可以不填</td></tr></tbody></table><h3 id="2、URL"><a href="#2、URL" class="headerlink" title="2、URL"></a>2、URL</h3><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>url</td><td>网站的网址</td></tr><tr><td>root</td><td>网站的根目录， 也是存放文章的目录</td></tr><tr><td>permalink</td><td>文章的链接格式 ，默认为 <code>:year/:month/:day/:title/</code></td></tr><tr><td>permalink_defaults</td><td>永久链接中每个段的默认值</td></tr></tbody></table><h3 id="3、Directory"><a href="#3、Directory" class="headerlink" title="3、Directory"></a>3、Directory</h3><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹 ，存放用户的资源文件，默认为 <code>source</code></td></tr><tr><td>public_dir</td><td>公用文件夹 ，存放生成的静态文件，默认为 <code>public</code></td></tr><tr><td>tag_dir</td><td>标签目录 ，默认为 <code>tags</code></td></tr><tr><td>archive_dir</td><td>档案目录 ，默认为 <code>archives</code></td></tr><tr><td>category_dir</td><td>分类目录 ，默认为 <code>categories</code></td></tr><tr><td>code_dir</td><td>代码目录 ，默认为 <code>downloads/code</code></td></tr><tr><td>i18n_dir</td><td>i18n目录 ，默认为 <code>:lang</code></td></tr><tr><td>skip_render</td><td>储存站长验证文件，跳过指定文件的渲染</td></tr></tbody></table><h3 id="4、Writing"><a href="#4、Writing" class="headerlink" title="4、Writing"></a>4、Writing</h3><p>这里是比较常用的写作设置，可以根据自己的写作习惯随时进行调整</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">new_post_name</td><td align="center">文章的文件名格式，默认为 <code>:title.md</code></td></tr><tr><td align="center">default_layout</td><td align="center">预设的布局模板，默认为 <code>post</code></td></tr><tr><td align="center">titlecase</td><td align="center">标题是否使用首字母大写 ，默认为 <code>false</code></td></tr><tr><td align="center">external_link</td><td align="center">链接是否在新标签页中打开，默认为 <code>true</code></td></tr><tr><td align="center">filename_case</td><td align="center">将文件名转换为 <code>1</code> 小写 或 <code>2</code> 大写，默认为 <code>0</code></td></tr><tr><td align="center">render_drafts</td><td align="center">是否显示渲染草稿，默认为 <code>false</code></td></tr><tr><td align="center">post_asset_folder</td><td align="center">是否启用 Asset 文件夹，默认为 <code>false</code></td></tr><tr><td align="center">relative_link</td><td align="center">是否建立相对于根文件夹的链接，默认为 <code>false</code></td></tr><tr><td align="center">future</td><td align="center">是否显示未来文章，默认为 <code>true</code></td></tr><tr><td align="center">highlight</td><td align="center">代码块设置</td></tr></tbody></table><p><strong>highlight</strong></p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">enable</td><td align="center">是否使用代码高亮 ，默认为 <code>true</code></td></tr><tr><td align="center">line_number</td><td align="center">是否显示行号 ，默认为 <code>true</code></td></tr><tr><td align="center">auto_detect</td><td align="center">是否自动检测语言 ，默认为 <code>false</code></td></tr><tr><td align="center">tab_replace</td><td align="center">tab 替代设置</td></tr></tbody></table><h3 id="5、Home-page-setting"><a href="#5、Home-page-setting" class="headerlink" title="5、Home page setting"></a>5、Home page setting</h3><p>首页设置，可以自己决定每页显示的文章数量和显示文章的顺序</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">index_generator</td><td align="center">主页设置</td></tr></tbody></table><p><strong>index_generator</strong></p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">path</td><td align="center">首页的根目录</td></tr><tr><td align="center">per_page</td><td align="center">每页显示文章的数量，默认为 <code>10</code></td></tr><tr><td align="center">order_by</td><td align="center">显示文章的顺序，默认为 <code>-date</code></td></tr></tbody></table><h3 id="6、Category-amp-Tag"><a href="#6、Category-amp-Tag" class="headerlink" title="6、Category &amp; Tag"></a>6、Category &amp; Tag</h3><p>这里是关于分类和标签的配置</p><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">default_category</td><td align="center">预设分类，默认为 <code>uncategorized</code></td></tr><tr><td align="center">category_map</td><td align="center">分类别名</td></tr><tr><td align="center">tag_map</td><td align="center">标签别名</td></tr></tbody></table><h3 id="7、Date-Time-format"><a href="#7、Date-Time-format" class="headerlink" title="7、Date / Time format"></a>7、Date / Time format</h3><p>时间和日期的显示格式，一般没特殊要求的也不需要改</p><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>date_format</td><td>日期格式，默认为 <code>YYYY-MM-DD</code></td></tr><tr><td>time_format</td><td>时间格式，默认为 <code>HH:mm:ss</code></td></tr></tbody></table><h3 id="8、Pagination"><a href="#8、Pagination" class="headerlink" title="8、Pagination"></a>8、Pagination</h3><p>时间和日期的显示格式，一般没特殊要求的也不需要改</p><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>per_page</td><td>单个页面上显示的文章数量，默认为 <code>10</code> ，用 <code>0</code> 表示禁用分页</td></tr><tr><td>pagination_dir</td><td>分页目录，默认为 <code>page</code></td></tr></tbody></table><h3 id="9、Extensions"><a href="#9、Extensions" class="headerlink" title="9、Extensions"></a>9、Extensions</h3><p>这里可以设置主题类型和插件，之后的文章讲到更换博客主题时需要进行更改</p><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>theme</td><td>博客使用的主题，默认为 <code>landscape</code></td></tr></tbody></table><h3 id="10、Deployment"><a href="#10、Deployment" class="headerlink" title="10、Deployment"></a>10、Deployment</h3><p>这里是关于网站部署的配置，常用的有部署类型和部署地址</p><table><thead><tr><th><strong>Setting</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>deploy</td><td>网站部署配置</td></tr></tbody></table><table><thead><tr><th align="center"><strong>Setting</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">type</td><td align="center">网站部署类型</td></tr><tr><td align="center">repo</td><td align="center">网站部署地址</td></tr></tbody></table><p>【参考资料】</p><ul><li><a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EazyExcel对Excel读操作（二）</title>
    <link href="/8c5923fc.html"/>
    <url>/8c5923fc.html</url>
    
    <content type="html"><![CDATA[<h3 id="实现EasyExcel对Excel读操作"><a href="#实现EasyExcel对Excel读操作" class="headerlink" title="实现EasyExcel对Excel读操作"></a>实现EasyExcel对Excel读操作</h3><h4 id="1、创建实体类"><a href="#1、创建实体类" class="headerlink" title="1、创建实体类"></a>1、创建实体类</h4><p><strong>class ReadData</strong></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadData</span> &#123;</span><br>    <span class="hljs-comment">//设置列对应的属性</span><br>    @ExcelProperty(index = <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sid;<br>    <br>    <span class="hljs-comment">//设置列对应的属性</span><br>    @ExcelProperty(index = <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">private</span> String sname;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sid;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sid)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sid = sid;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSname</span><span class="hljs-params">(String sname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sname = sname;<br>    &#125;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ReadData&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;sid=&quot;</span> + sid +<br>                <span class="hljs-string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、创建读取操作的监听器"><a href="#2、创建读取操作的监听器" class="headerlink" title="2、创建读取操作的监听器"></a>2、创建读取操作的监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.context.AnalysisContext;<br><span class="hljs-keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;<br><span class="hljs-keyword">import</span> com.alibaba.excel.exception.ExcelDataConvertException;<br><span class="hljs-keyword">import</span> com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//创建读取excel监听器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnalysisEventListener</span>&lt;<span class="hljs-title">ReadData</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//创建list集合封装最终的数据</span><br>    List&lt;ReadData&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;ReadData&gt;();<br><br>    <span class="hljs-comment">//一行一行去读取excle内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(ReadData user, AnalysisContext analysisContext)</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;***&quot;</span>+user);<br>        list.add(user);<br>    &#125;<br><br>    <span class="hljs-comment">//读取excel表头信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;表头信息：&quot;</span>+headMap);<br>    &#125;<br><br>    <span class="hljs-comment">//读取完成后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、调用实现最终的读取"><a href="#3、调用实现最终的读取" class="headerlink" title="3、调用实现最终的读取"></a>3、调用实现最终的读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 写法1：</span><br>        String fileName = <span class="hljs-string">&quot;F:\\01.xlsx&quot;</span>;<br>        <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span><br>        EasyExcel.read(fileName, ReadData.class, <span class="hljs-keyword">new</span> ExcelListener()).sheet().doRead();<br><br>        <span class="hljs-comment">// 写法2：</span><br>        InputStream in = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;F:\\01.xlsx&quot;</span>));<br>        ExcelReader excelReader = EasyExcel.read(in, ReadData.class, <span class="hljs-keyword">new</span> ExcelListener()).build();<br>        ReadSheet readSheet = EasyExcel.readSheet(<span class="hljs-number">0</span>).build();<br>        excelReader.read(readSheet);<br>        <span class="hljs-comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>        excelReader.finish();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EazyExcel对Excel写操作（一）</title>
    <link href="/d746f705.html"/>
    <url>/d746f705.html</url>
    
    <content type="html"><![CDATA[<h3 id="EasyExcel对Excel写操作"><a href="#EasyExcel对Excel写操作" class="headerlink" title="EasyExcel对Excel写操作"></a>EasyExcel对Excel写操作</h3><h4 id="1、创建一个普通的maven项目"><a href="#1、创建一个普通的maven项目" class="headerlink" title="1、创建一个普通的maven项目"></a>1、创建一个普通的maven项目</h4><p>项目名：excel-easydemo</p><h4 id="2、pom中引入xml相关依赖"><a href="#2、pom中引入xml相关依赖" class="headerlink" title="2、pom中引入xml相关依赖"></a>2、pom中引入xml相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、创建实体类"><a href="#3、创建实体类" class="headerlink" title="3、创建实体类"></a>3、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><br><span class="hljs-comment">//设置表头和添加的数据字段</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoData</span> </span>&#123;<br>    <span class="hljs-comment">//设置表头名称</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生编号&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sno;<br><span class="hljs-comment">//设置表头名称</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String sname;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSno</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sno;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSno</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sno)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sno = sno;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSname</span><span class="hljs-params">(String sname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sname = sname;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DemoData&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;sno=&quot;</span> + sno +<br>                <span class="hljs-string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-、实现写操作"><a href="#4-、实现写操作" class="headerlink" title="4 、实现写操作"></a>4 、实现写操作</h4><h5 id="（1）创建方法循环设置要添加到Excel的数据"><a href="#（1）创建方法循环设置要添加到Excel的数据" class="headerlink" title="（1）创建方法循环设置要添加到Excel的数据"></a><strong>（1）创建方法循环设置要添加到Excel的数据</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//循环设置要添加的数据，最终封装到list集合中</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DemoData&gt; <span class="hljs-title">data</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;DemoData&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        DemoData data = <span class="hljs-keyword">new</span> DemoData();<br>        data.setSno(i);<br>        data.setSname(<span class="hljs-string">&quot;张三&quot;</span>+i);<br>        list.add(data);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（2）实现最终的添加操作（写法一）"><a href="#（2）实现最终的添加操作（写法一）" class="headerlink" title="（2）实现最终的添加操作（写法一）"></a><strong>（2）实现最终的添加操作（写法一）</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//循环设置要添加的数据，最终封装到list集合中</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DemoData&gt; <span class="hljs-title">data</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;DemoData&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        DemoData data = <span class="hljs-keyword">new</span> DemoData();<br>        data.setSno(i);<br>        data.setSname(<span class="hljs-string">&quot;张三&quot;</span>+i);<br>        list.add(data);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）实现最终的添加操作（写法二）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 写法2，方法二需要手动关闭流</span><br>    String fileName = <span class="hljs-string">&quot;F:\\112.xlsx&quot;</span>;<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写</span><br>    ExcelWriter excelWriter = EasyExcel.write(fileName, DemoData.class).build();<br>    WriteSheet writeSheet = EasyExcel.writerSheet(<span class="hljs-string">&quot;写入方法二&quot;</span>).build();<br>    excelWriter.write(data(), writeSheet);<br>    <span class="hljs-comment">/// 千万别忘记finish 会帮忙关闭流</span><br>    excelWriter.finish();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud微服务配置（四）Hystrix</title>
    <link href="/66dfa74b.html"/>
    <url>/66dfa74b.html</url>
    
    <content type="html"><![CDATA[<h3 id="Hystrix基本概念"><a href="#Hystrix基本概念" class="headerlink" title="Hystrix基本概念"></a>Hystrix基本概念</h3><h4 id="1、Spring-Cloud调用接口过程"><a href="#1、Spring-Cloud调用接口过程" class="headerlink" title="1、Spring Cloud调用接口过程"></a>1、Spring Cloud调用接口过程</h4><p>Spring Cloud 在接口调用上，大致会经过如下几个组件配合：</p><p><strong><code>Feign</code> —–&gt;<code>Hystrix</code> —&gt;<code>Ribbon</code> —&gt;<code>Http Client</code>（apache http components 或者 Okhttp）</strong>具体交互流程上，如下图所示：</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/d5be6f27-caff-45b6-8f27-837ea6b11134.jpg" alt="d5be6f27-caff-45b6-8f27-837ea6b11134"></p><p><strong>（1）接口化请求调用</strong>当调用被<code>@FeignClient</code>注解修饰的接口时，在框架内部，将请求转换成Feign的请求实例<code>feign.Request</code>，交由Feign框架处理。</p><p><strong>（2）Feign</strong> ：转化请求Feign是一个http请求调用的轻量级框架，可以以Java接口注解的方式调用Http请求，封装了Http调用流程。</p><p><strong>（3）</strong> <strong>Hystrix</strong>：熔断处理机制 Feign的调用关系，会被Hystrix代理拦截，对每一个Feign调用请求，Hystrix都会将其包装成<code>HystrixCommand</code>,参与Hystrix的流控和熔断规则。如果请求判断需要熔断，则Hystrix直接熔断，抛出异常或者使用<code>FallbackFactory</code>返回熔断<code>Fallback</code>结果；如果通过，则将调用请求传递给<code>Ribbon</code>组件。</p><p><strong>（4）</strong> <strong>Ribbon</strong>：服务地址选择 当请求传递到<code>Ribbon</code>之后,<code>Ribbon</code>会根据自身维护的服务列表，根据服务的服务质量，如平均响应时间，Load等，结合特定的规则，从列表中挑选合适的服务实例，选择好机器之后，然后将机器实例的信息请求传递给<code>Http Client</code>客户端，<code>HttpClient</code>客户端来执行真正的Http接口调用；</p><p><strong>（5）HttpClient</strong> ：Http客户端，真正执行Http调用根据上层<code>Ribbon</code>传递过来的请求，已经指定了服务地址，则HttpClient开始执行真正的Http请求</p><h4 id="2、Hystrix概念"><a href="#2、Hystrix概念" class="headerlink" title="2、Hystrix概念"></a><strong>2</strong>、Hystrix概念</h4><p>Hystrix 是一个供分布式系统使用，提供延迟和容错功能，保证复杂的分布系统在面临不可避免的失败时，仍能有其弹性。</p><p>比如系统中有很多服务，当某些服务不稳定的时候，使用这些服务的用户线程将会阻塞，如果没有隔离机制，系统随时就有可能会挂掉，从而带来很大的风险。SpringCloud使用Hystrix组件提供断路器、资源隔离与自我修复功能。下图表示服务B触发了断路器，阻止了级联失败</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/59809c07-0923-4546-aa83-ed920f53a3a5.jpg" alt="59809c07-0923-4546-aa83-ed920f53a3a5"></p><h3 id="二、feign结合Hystrix使用"><a href="#二、feign结合Hystrix使用" class="headerlink" title="二、feign结合Hystrix使用"></a>二、feign结合Hystrix使用</h3><h4 id="1、在service的pom中添加依赖"><a href="#1、在service的pom中添加依赖" class="headerlink" title="1、在service的pom中添加依赖"></a><strong>1、在service的pom中添加依赖</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!--服务注册--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--服务调用--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、在配置文件中添加hystrix配置"><a href="#2、在配置文件中添加hystrix配置" class="headerlink" title="2、在配置文件中添加hystrix配置"></a>2、在配置文件中添加hystrix配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#开启熔断机制</span><br><span class="hljs-meta">feign.hystrix.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 设置hystrix超时时间，默认1000ms</span><br><span class="hljs-meta">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="hljs-string">6000</span><br></code></pre></td></tr></table></figure><h4 id="3、在service-edu的client包里面创建熔断器的实现类"><a href="#3、在service-edu的client包里面创建熔断器的实现类" class="headerlink" title="3、在service-edu的client包里面创建熔断器的实现类"></a>3、在service-edu的client包里面创建熔断器的实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VodFileDegradeFeignClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">VodClient</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeVideo</span><span class="hljs-params">(String videoId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;time out&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeVideoList</span><span class="hljs-params">(List videoIdList)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;time out&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、修改VodClient接口的注解"><a href="#4、修改VodClient接口的注解" class="headerlink" title="4、修改VodClient接口的注解"></a>4、修改VodClient接口的注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;service-vod&quot;, fallback = VodFileDegradeFeignClient.class)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VodClient</span> </span>&#123;<br>    <span class="hljs-meta">@DeleteMapping(value = &quot;/eduvod/vod/&#123;videoId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;videoId&quot;)</span> String videoId)</span></span>;<br><br>    <span class="hljs-meta">@DeleteMapping(value = &quot;/eduvod/vod/delete-batch&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeVideoList</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;videoIdList&quot;)</span> List videoIdList)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud微服务配置（三）Feign</title>
    <link href="/94a7c36.html"/>
    <url>/94a7c36.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Feign"><a href="#一、Feign" class="headerlink" title="一、Feign"></a>一、Feign</h3><h4 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h4><ul><li>Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</li><li>Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</li><li>Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</li><li>Spring Cloud Feign是基于Netflix feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，除了提供这两者的强大功能外，还提供了一种声明式的Web服务客户端定义的方式。</li><li>Spring Cloud Feign帮助我们定义和实现依赖服务接口的定义。在Spring Cloud feign的实现下，只需要创建一个接口并用注解方式配置它，即可完成服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。</li></ul><h3 id="二、实现服务调用"><a href="#二、实现服务调用" class="headerlink" title="二、实现服务调用"></a>二、实现服务调用</h3><h4 id="1、在service模块添加pom依赖"><a href="#1、在service模块添加pom依赖" class="headerlink" title="1、在service模块添加pom依赖"></a>1、在service模块添加pom依赖</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex">&lt;!--服务调用--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2、在调用端的启动类添加注解"><a href="#2、在调用端的启动类添加注解" class="headerlink" title="2、在调用端的启动类添加注解"></a>2、在调用端的启动类添加注解</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">@EnableFeignClients<br></code></pre></td></tr></table></figure><h4 id="3、创建包和接口"><a href="#3、创建包和接口" class="headerlink" title="3、创建包和接口"></a>3、创建包和<strong>接口</strong></h4><p>创建xx.xx.xxclient包</p><p>@FeignClient注解用于指定从哪个服务中调用功能 ，名称与被调用的服务名保持一致。</p><p>@GetMapping注解用于对被调用的微服务进行地址映射。</p><p><strong>@PathVariable注解一定要指定参数名称，否则出错</strong></p><p>@Component注解防止，在其他位置注入VodClient时idea报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.guli.edu.client;<br><br><span class="hljs-meta">@FeignClient(&quot;service-xxx&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VodClient</span> </span>&#123;<br><span class="hljs-meta">@DeleteMapping(value = &quot;/eduvod/vod/video/&#123;videoId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;videoId&quot;)</span> String videoId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、调用微服务"><a href="#4、调用微服务" class="headerlink" title="4、调用微服务"></a><strong>4、调用微服务</strong></h4><p>在调用端的VideoServiceImpl中调用client中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">removeVideoById</span><span class="hljs-params">(String id)</span> </span>&#123;<br><br>    <span class="hljs-comment">//查询云端视频id</span><br>    Video video = baseMapper.selectById(id);<br>    String videoSourceId = video.getVideoSourceId();<br>    <span class="hljs-comment">//删除视频资源</span><br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(videoSourceId))&#123;<br>        vodClient.removeVideo(videoSourceId);<br>    &#125;<br><br>    Integer result = baseMapper.deleteById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span> != result &amp;&amp; result &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud微服务配置（二）Nacos</title>
    <link href="/9fb379d1.html"/>
    <url>/9fb379d1.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Nacos"><a href="#一、Nacos" class="headerlink" title="一、Nacos"></a>一、Nacos</h3><h4 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h4><p><strong>（1）</strong>Nacos 是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><strong>（2）</strong>常见的注册中心：</p><ol><li><strong>Eureka</strong>（原生，2.0遇到性能瓶颈，停止维护）</li><li> <strong>Zookeeper</strong>（支持，专业的独立产品。例如：dubbo）</li><li><strong>Consul</strong>（原生，GO语言开发）</li><li> <strong>Nacos</strong></li></ol><p>相对于 Spring Cloud Eureka 来说，Nacos 更强大。Nacos = Spring Cloud Eureka + Spring Cloud Config</p><p> Nacos 可以与 Spring, Spring Boot, Spring Cloud 集成，并能代替 Spring Cloud Eureka, Spring Cloud Config</p><p>- 通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现。</p><p><strong>（3）</strong>Nacos是以服务为主要服务对象的中间件，Nacos支持所有主流的服务发现、配置和管理。</p><p>Nacos主要提供以下四大功能：</p><ol><li><p>服务发现和服务健康监测</p></li><li><p>动态配置服务</p></li><li><p>动态DNS服务</p></li><li><p>服务及其元数据管理</p></li></ol><p><strong>（4）</strong>Nacos结构图</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/abcd.jpg" alt="abcd"></p><h4 id="2、Nacos下载和安装"><a href="#2、Nacos下载和安装" class="headerlink" title="2、Nacos下载和安装"></a>2、Nacos下载和安装</h4><h5 id="（1）下载地址和版本"><a href="#（1）下载地址和版本" class="headerlink" title="（1）下载地址和版本"></a>（1）下载地址和版本</h5><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>下载版本：nacos-server-1.1.4.tar.gz或nacos-server-1.1.4.zip，解压任意目录即可</p><h5 id="（2）启动nacos服务"><a href="#（2）启动nacos服务" class="headerlink" title="（2）启动nacos服务"></a>（2）启动nacos服务</h5><p>- Linux/Unix/Mac</p><p>启动命令(standalone代表着单机模式运行，非集群模式)</p><p>启动命令：sh startup.sh -m standalone</p><p>- Windows</p><p>启动命令：cmd startup.cmd 或者双击startup.cmd运行文件。</p><p>访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>用户名密码：nacos/nacos</p><h3 id="二、服务注册（service-edu为例）"><a href="#二、服务注册（service-edu为例）" class="headerlink" title="二、服务注册（service_edu为例）"></a>二、服务注册（service_edu为例）</h3><h4 id="1、在service模块配置pom"><a href="#1、在service模块配置pom" class="headerlink" title="1、在service模块配置pom"></a>1、在service模块配置pom</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex">&lt;!--服务注册--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;<br>&lt;&#x2F;dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2、添加服务配置信息"><a href="#2、添加服务配置信息" class="headerlink" title="2、添加服务配置信息"></a>2、添加服务配置信息</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex"># nacos服务地址<br>spring.cloud.nacos.discovery.server-addr&#x3D;127.0.0.1:8848<br># 服务名<br>spring.application.name&#x3D;service-edu<br></code></pre></td></tr></table></figure><h4 id="3、添加Nacos客户端注解"><a href="#3、添加Nacos客户端注解" class="headerlink" title="3、添加Nacos客户端注解"></a>3、添加Nacos客户端注解</h4><p>在客户端微服务启动类中添加注解</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">@EnableDiscoveryClient<br></code></pre></td></tr></table></figure><h4 id="4、启动客户端微服务"><a href="#4、启动客户端微服务" class="headerlink" title="4、启动客户端微服务"></a>4、启动客户端微服务</h4><p>启动注册中心</p><p>启动已注册的微服务，可以在Nacos服务列表中看到被注册的微服务</p><p><img src="https://gitee.com/mathwm/picBed/raw/master/e61822a5-f8db-4ea3-b54e-df6ee00b886e.png" alt="e61822a5-f8db-4ea3-b54e-df6ee00b886e"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud微服务配置（一）微服务介绍</title>
    <link href="/a76f8744.html"/>
    <url>/a76f8744.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是微服务"><a href="#一、什么是微服务" class="headerlink" title="一、什么是微服务"></a>一、什么是微服务</h3><h4 id="1、微服务的由来"><a href="#1、微服务的由来" class="headerlink" title="1、微服务的由来"></a>1、微服务的由来</h4><p>微服务最早由Martin Fowler与James Lewis于2014年共同提出，微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，每个服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API，这些服务基于业务能力构建，并能够通过自动化部署机制来独立部署，这些服务使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。 </p><h4 id="2、为什么需要微服务"><a href="#2、为什么需要微服务" class="headerlink" title="2、为什么需要微服务"></a>2、为什么需要微服务</h4><p>在传统的IT行业软件大多都是各种独立系统的堆砌，这些系统的问题总结来说就是扩展性差，可靠性不高，维护成本高。到后面引入了SOA服务化，但是，由于 SOA 早期均使用了总线模式，这种总线模式是与某种技术栈强绑定的，比如：J2EE。这导致很多企业的遗留系统很难对接，切换时间太长，成本太高，新系统稳定性的收敛也需要一些时间。 </p><h4 id="3、微服务与单体架构区别"><a href="#3、微服务与单体架构区别" class="headerlink" title="3、微服务与单体架构区别"></a>3、微服务与单体架构区别</h4><p>（1）单体架构所有的模块全都耦合在一块，代码量大，维护困难。</p><pre><code>微服务每个模块就相当于一个单独的项目，代码量明显减少，遇到问题也相对来说比较好解决。</code></pre><p>（2）单体架构所有的模块都共用一个数据库，存储方式比较单一。</p><pre><code>微服务每个模块都可以使用不同的存储方式（比如有的用redis，有的用mysql等），数据库也是单个模块对应自己的数据库。</code></pre><p>（3）单体架构所有的模块开发所使用的技术一样。</p><pre><code>微服务每个模块都可以使用不同的开发技术，开发模式更灵活。 </code></pre><h4 id="4、微服务本质"><a href="#4、微服务本质" class="headerlink" title="4、微服务本质"></a>4、微服务本质</h4><ul><li>微服务，关键其实不仅仅是微服务本身，而是系统要提供一套基础的架构，这种架构使得微服务可以独立的部署、运行、升级，不仅如此，这个系统架构还让微服务与微服务之间在结构上“松耦合”，而在功能上则表现为一个统一的整体。这种所谓的“统一的整体”表现出来的是统一风格的界面，统一的权限管理，统一的安全策略，统一的上线过程，统一的日志和审计方法，统一的调度方式，统一的访问入口等等。</li><li>微服务的目的是有效的拆分应用，实现敏捷开发和部署 。</li><li>微服务提倡的理念团队间应该是 inter-operate, not integrate 。inter-operate是定义好系统的边界和接口，在一个团队内全栈，让团队自治，原因就是因为如果团队按照这样的方式组建，将沟通的成本维持在系统内部，每个子系统就会更加内聚，彼此的依赖耦合能变弱，跨系统的沟通成本也就能降低。</li></ul><h4 id="5、什么样的项目适合微服务"><a href="#5、什么样的项目适合微服务" class="headerlink" title="5、什么样的项目适合微服务"></a>5、什么样的项目适合微服务</h4><p>微服务可以按照业务功能本身的独立性来划分，如果系统提供的业务是非常底层的，如：操作系统内核、存储系统、网络系统、数据库系统等等，这类系统都偏底层，功能和功能之间有着紧密的配合关系，如果强制拆分为较小的服务单元，会让集成工作量急剧上升，并且这种人为的切割无法带来业务上的真正的隔离，所以无法做到独立部署和运行，也就不适合做成微服务了。</p><h4 id="6、微服务开发框架"><a href="#6、微服务开发框架" class="headerlink" title="6、微服务开发框架"></a>6、微服务开发框架</h4><p>目前微服务的开发框架，最常用的有以下四个：</p><p>Spring Cloud：<a href="http://projects.spring.io/spring-cloud%EF%BC%88%E7%8E%B0%E5%9C%A8%E9%9D%9E%E5%B8%B8%E6%B5%81%E8%A1%8C%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%89">http://projects.spring.io/spring-cloud（现在非常流行的微服务架构）</a></p><p>Dubbo：<a href="http://dubbo.io/">http://dubbo.io</a></p><p>Dropwizard：<a href="http://www.dropwizard.io/">http://www.dropwizard.io</a> （关注单个微服务的开发）</p><p>Consul、etcd&amp;etc.（微服务的模块）</p><h4 id="7、什么是Spring-Cloud"><a href="#7、什么是Spring-Cloud" class="headerlink" title="7、什么是Spring Cloud"></a>7、什么是Spring Cloud</h4><p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性简化了分布式系统基础设施的开发，如服务发现、服务注册、配置中心、消息总线、负载均衡、 熔断器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p><h4 id="8、Spring-Cloud和Spring-Boot是什么关系"><a href="#8、Spring-Cloud和Spring-Boot是什么关系" class="headerlink" title="8、Spring Cloud和Spring Boot是什么关系"></a>8、Spring Cloud和Spring Boot是什么关系</h4><p>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务，Spring Cloud是一个基于Spring Boot实现的开发工具；Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架； Spring Boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring Cloud很大的一部分是基于Spring Boot来实现，必须基于Spring Boot开发。可以单独使用Spring Boot开发项目，但是Spring Cloud离不开 Spring Boot。</p><h4 id="9、Spring-Cloud相关基础服务组件"><a href="#9、Spring-Cloud相关基础服务组件" class="headerlink" title="9、Spring Cloud相关基础服务组件"></a>9、Spring Cloud相关基础服务组件</h4><p>服务发现——Netflix Eureka  （<strong>Nacos</strong>）<br>服务调用——Netflix Feign<br>熔断器——Netflix Hystrix<br>服务网关——Spring Cloud  GateWay<br>分布式配置——Spring Cloud Config  （<strong>Nacos</strong>）<br>消息总线 —— Spring Cloud Bus （<strong>Nacos</strong>）</p><h4 id="10、Spring-Cloud的版本"><a href="#10、Spring-Cloud的版本" class="headerlink" title="10、Spring Cloud的版本"></a>10、Spring Cloud的版本</h4><p>Spring Cloud并没有熟悉的数字版本号，而是对应一个开发代号。</p><table><thead><tr><th>Cloud代号</th><th>Boot版本(train)</th><th>Boot版本(tested)</th><th>lifecycle</th></tr></thead><tbody><tr><td>Angle</td><td>1.2.x</td><td>incompatible with 1.3</td><td>EOL in July 2017</td></tr><tr><td>Brixton</td><td>1.3.x</td><td>1.4.x</td><td>2017-07卒</td></tr><tr><td>Camden</td><td>1.4.x</td><td>1.5.x</td><td>-</td></tr><tr><td>Dalston</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Edgware</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Finchley</td><td>2.0.x</td><td>not expected 1.5.x</td><td>-</td></tr><tr><td>Greenwich</td><td>2.1.x</td><td></td><td></td></tr><tr><td>Hoxton</td><td>2.2.x</td><td></td><td></td></tr></tbody></table><p>开发代号看似没有什么规律，但实际上首字母是有顺序的，比如：Dalston版本，我们可以简称 D 版本，对应的 Edgware 版本我们可以简称 E 版本。</p><h5 id="小版本"><a href="#小版本" class="headerlink" title="小版本"></a>小版本</h5><p>Spring Cloud 小版本分为:</p><p>SNAPSHOT： 快照版本，随时可能修改</p><p>M： MileStone，M1表示第1个里程碑版本，一般同时标注PRE，表示预览版版。</p><p>SR： Service Release，SR1表示第1个正式版本，一般同时标注GA：(GenerallyAvailable),表示稳定版本。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo入坑指南（四） 生成永久文章链接</title>
    <link href="/181f256d.html"/>
    <url>/181f256d.html</url>
    
    <content type="html"><![CDATA[<p>Hexo 默认文章链接生成规则是按照年、月、日、标题来生成的。一旦文章标题或者发布时间被修改，URL 就会发生变化，之前文章地址也会变成 404，而且 URL 层级很深，不利于分享和搜索引擎收录</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>点击即可访问插件源码地址 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><blockquote><p>依据提示安装即可。</p></blockquote><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>修改博客根目录配置文件 <code>_config.yml</code> 的 <code>permalink</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># permalink: :year/:month/:day/:title/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">p/:abbrlink.html</span>  <span class="hljs-comment"># p 是自定义的前缀</span><br><span class="hljs-attr">abbrlink:</span><br>    <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>     <span class="hljs-comment">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><p>不同算法和进制生成不同的格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">crc16</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">hex</span><br><span class="hljs-string">https://post.username.com/posts/66c8.html</span><br><span class="hljs-string">crc16</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">dec</span><br><span class="hljs-string">https://post.username.com/posts/65535.html</span><br><br><span class="hljs-string">crc32</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">hex</span><br><span class="hljs-string">https://post.username.com/posts/8ddf18fb.html</span><br><span class="hljs-string">crc32</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">dec</span><br><span class="hljs-string">https://post.username.com/posts/1690090958.html</span><br></code></pre></td></tr></table></figure><h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h3><p>先清理下本地的文件 <code>hexo clean</code>，然后重新生成 <code>hexo g</code>，启动博客 <code>hexo s</code>。该插件会在每篇文章的开头增加内容：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">abbrlink: df27ccfb<br></code></pre></td></tr></table></figure><p>浏览器打开 <code>http://localhost:4000/</code> 查看吧！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>url</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo入坑指南（三） 远端部署</title>
    <link href="/47d6bb9e.html"/>
    <url>/47d6bb9e.html</url>
    
    <content type="html"><![CDATA[<h3 id="Hexo-远端部署"><a href="#Hexo-远端部署" class="headerlink" title="Hexo 远端部署"></a>Hexo 远端部署</h3><h4 id="1、注册-Github-账号"><a href="#1、注册-Github-账号" class="headerlink" title="1、注册 Github 账号"></a>1、注册 Github 账号</h4><p>登陆 <a href="https://github.com/">GitHub官网</a> ，按要求填写好自己的个人信息（包括用户名，邮箱，密码等），然后进行邮箱验证后就注册好 GitHub 账号了，十分方便快捷</p><p>完成之后还需要在本地配置一下自己的个人信息，打开 git bash 窗口，输入以下的命令即可</p><p>（注意要将 your_name 和 your_email 替换成自己的信息）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name your_name</span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email your_email</span><br></code></pre></td></tr></table></figure><h4 id="2、创建-GitHub-仓库"><a href="#2、创建-GitHub-仓库" class="headerlink" title="2、创建 GitHub 仓库"></a>2、创建 GitHub 仓库</h4><p>打开 GitHub 官网的个人首页，点击 <code>New repository</code> 新建仓库，并按以下说明填写仓库信息：</p><p>Repository name 的格式为 <code>username.github.io</code>，其中，username 是自己的 GitHub 名称</p><p>另外，建议勾选 <code>Initialize this repository with a README</code> 选项，生成 <a href="http://readme.md/">README.md</a> 文件</p><p>最后点击 <code>Create repository</code>，创建仓库</p><h4 id="3、安装插件"><a href="#3、安装插件" class="headerlink" title="3、安装插件"></a>3、安装插件</h4><p>进入站点根文件夹，打开 git bash 输入 <code>npm install hexo-deployer-git --save</code> 命令安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><h4 id="4、修改配置"><a href="#4、修改配置" class="headerlink" title="4、修改配置"></a>4、修改配置</h4><p>打开根文件夹下的 <code>_config.yml</code> 配置文件，进行如下配置</p><p>（注意要将 username 替换成自己的名字，并且在属性与值之间留一个空格）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="5、配置-SSH"><a href="#5、配置-SSH" class="headerlink" title="5、配置 SSH"></a>5、配置 SSH</h4><p>进入站点根文件夹，打开 git bash，输入 <code>ssh-keygen -t rsa -C &quot;your_email&quot;</code> 命令并一路回车获得密钥</p><p>（注意将 your_email 替换成自己的邮箱地址）</p><p>完成后，根据提示信息中的文件地址 <code>/c/Users/user/.ssh/id_rsa.pub</code> 找到 id_rsa.pub 文件，复制文件里面的内容</p><p>登录 Github，打开 <code>Settings</code></p><p>选择 <code>SSH and GPG keys</code>，选择 <code>New SSh Key</code></p><p>将复制的内容添加到 Key 中， Title 可以自己设定，最后点击 <code>Add SSH Key</code> 即可</p><p>最后，回到站点根文件夹，打开 git bash，输入 <code>ssh -T git@github.com</code> 命令验证是否添加成功</p><h4 id="6、发布网页"><a href="#6、发布网页" class="headerlink" title="6、发布网页"></a>6、发布网页</h4><p>git bash 中输入命令 <code>hexo g</code> 生成静态文件，输入命令 <code>hexo d</code> 部署到 Github</p><p>此时，打开 <a href="https://username.github.io/">https://username.github.io</a> 就可以看见已经部署好的网站了，大功告成！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo入坑指南（二） 撰写Markdown文章</title>
    <link href="/7f9e57b7.html"/>
    <url>/7f9e57b7.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h3><p>打开命令行，Linux打开shell,Windows打开cmd,输入如下命令创建文章，其中 <code>title</code> 为文章的标题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo new <span class="hljs-string">&quot;title&quot;</span><br></code></pre></td></tr></table></figure><p>当输入命令后，就会在 <code>source/_post</code> 文件夹下创建一个文件，命名为：<code>title.md</code></p><p>当发布Hexo后，这篇文章就出现在博客中了</p><h3 id="二、编写文章（基于-Markdown）"><a href="#二、编写文章（基于-Markdown）" class="headerlink" title="二、编写文章（基于 Markdown）"></a>二、编写文章（基于 Markdown）</h3><h4 id="1、Markdown-简介"><a href="#1、Markdown-简介" class="headerlink" title="1、Markdown 简介"></a>1、Markdown 简介</h4><p>但是，在我们正式写下第一个文字前，我们需要了解一下究竟什么是 Markdown？</p><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的 <strong>标记语言</strong>，通过简单的 <strong>标记语法</strong>，它可以使普通文本内容具有一定的格式</p></blockquote><p>有点像HTML，一样是标记语言</p><p>为了编写Markdown，有很多编辑器方便我们的书写，下面介绍几款</p><h5 id="1、Mou"><a href="#1、Mou" class="headerlink" title="1、Mou"></a>1、<strong>Mou</strong></h5><p><a href="http://25.io/mou/">http://25.io/mou/</a></p><h5 id="2、MarkdownPad"><a href="#2、MarkdownPad" class="headerlink" title="2、MarkdownPad"></a>2、<strong>MarkdownPad</strong></h5><p><a href="http://markdownpad.com/">http://markdownpad.com/</a></p><h5 id="３、Typora"><a href="#３、Typora" class="headerlink" title="３、Typora"></a><strong>３、Typora</strong></h5><p><a href="https://www.typora.io/">https://www.typora.io/</a></p><h4 id="2、常用的-Markdown-语法"><a href="#2、常用的-Markdown-语法" class="headerlink" title="2、常用的 Markdown 语法"></a>2、常用的 Markdown 语法</h4><h5 id="（1）标题"><a href="#（1）标题" class="headerlink" title="（1）标题"></a>（1）标题</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h5 id="Typora-快捷键："><a href="#Typora-快捷键：" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tex">Ctrl+1：一级标题<br><br>Ctrl+2：二级标题<br><br>Ctrl+3：三级标题<br><br>Ctrl+4：四级标题<br><br>Ctrl+5：五级标题<br><br>Ctrl+6 ：六级标题<br><br>Ctrl+0：段落<br></code></pre></td></tr></table></figure><h5 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">*斜体*<br>**粗体**<br>***加粗斜体***<br>~~删除线~~<br></code></pre></td></tr></table></figure><h5 id="Typora-快捷键：-1"><a href="#Typora-快捷键：-1" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex">Ctrl+I：斜体<br><br>Ctrl+B：粗体<br><br>Ctrl+U：下划线<br><br>Alt+Shift+5：删除线<br></code></pre></td></tr></table></figure><h5 id="（3）引用块"><a href="#（3）引用块" class="headerlink" title="（3）引用块"></a>（3）引用块</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">&gt; 文字引用<br></code></pre></td></tr></table></figure><h5 id="Typora-快捷键：-Ctrl-Shift-Q"><a href="#Typora-快捷键：-Ctrl-Shift-Q" class="headerlink" title="Typora 快捷键： Ctrl+Shift+Q"></a><strong>Typora 快捷键：</strong> Ctrl+Shift+Q</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">&#96;行内代码&#96;<br><br>&#96;&#96;&#96;<br>多行代码<br>多行代码<br>&#96;&#96;&#96;<br></code></pre></td></tr></table></figure><h5 id="Typora-快捷键：-2"><a href="#Typora-快捷键：-2" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">行内代码：Ctrl+Shift+&#96;<br><br>多行代码：Ctrl+Shift+K<br></code></pre></td></tr></table></figure><h5 id="（5）公式块"><a href="#（5）公式块" class="headerlink" title="（5）公式块"></a>（5）公式块</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">$$<br>数学公式<br>$$<br></code></pre></td></tr></table></figure><p><strong>Typora 快捷键：</strong> Ctrl+Shift+M</p><h5 id="（6）分割线"><a href="#（6）分割线" class="headerlink" title="（6）分割线"></a>（6）分割线</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex">方法一：---<br><br>方法二：+++<br><br>方法三：***<br></code></pre></td></tr></table></figure><h5 id="（7）列表"><a href="#（7）列表" class="headerlink" title="（7）列表"></a>（7）列表</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex">1. 有序列表项<br><br>* 无序列表项<br><br>+ 无序列表项<br><br>- 无序列表项<br></code></pre></td></tr></table></figure><p><strong>Typora 快捷键：</strong></p><p>有序列表项：Ctrl+Shift+[</p><p>无序列表项：Ctrl+Shift+]</p><h5 id="（8）表格"><a href="#（8）表格" class="headerlink" title="（8）表格"></a>（8）表格</h5><p><strong>Markdown 语法：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">表头1|表头2<br>-|-|-<br>内容11|内容12<br>内容21|内容22<br></code></pre></td></tr></table></figure><p><strong>Typora 快捷键：</strong> Ctrl+T</p><h5 id="（9）超链接"><a href="#（9）超链接" class="headerlink" title="（9）超链接"></a>（9）超链接</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex">方法一：[链接文字](链接地址 &quot;链接描述&quot;)<br>例如：[示例链接](https:&#x2F;&#x2F;www.example.com&#x2F; &quot;示例链接&quot;)<br><br>方法二：&lt;链接地址&gt;<br>例如：&lt;https:&#x2F;&#x2F;www.example.com&#x2F;&gt;<br></code></pre></td></tr></table></figure><p><strong>Typora快捷键：</strong> Ctrl+K</p><h5 id="（10）图片"><a href="#（10）图片" class="headerlink" title="（10）图片"></a>（10）图片</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">![图片文字](图片地址 &quot;图片描述&quot;)<br>例如：![示例图片](https:&#x2F;&#x2F;www.example.com&#x2F;example.PNG &quot;示例图片&quot;)<br></code></pre></td></tr></table></figure><p><strong>Typora快捷键：</strong> Ctrl+Shift+I</p><p><strong>说明</strong>：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p><ol><li><p>将 <strong>站点配置文件</strong> 中的 <code>post_asset_folder</code> 选项的值设置为 true</p></li><li><p>在站点文件夹中打开 git bash，输入命令 <code>npm install hexo-asset-image --save</code> 安装插件</p></li><li><p>这样，当使用 <code>hexo new title</code> 创建文章时，将同时在 <code>source/_post</code> 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p><p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 <code>![示例图片](title/example.PNG &quot;示例图片&quot;)</code> 添加图片</p></li></ol><h3 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h3><h4 id="（1）模板设置"><a href="#（1）模板设置" class="headerlink" title="（1）模板设置"></a>（1）模板设置</h4><p>   当我们使用命令 <code>hexo new &quot;title&quot;</code> 创建文章时，Hexo 会根据 <code>/scaffolds/post.md</code> 对新文章进行初始化</p><p>   换言之，<code>/scaffolds/post.md</code> 就是新文章的 <strong>模板</strong>，所以我们可以修改它来适应自己的写作习惯</p><p>   一个简单的示例如下：</p>   <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags: <br>categories: <br></code></pre></td></tr></table></figure><h4 id="（2）头部设置"><a href="#（2）头部设置" class="headerlink" title="（2）头部设置"></a>（2）头部设置</h4><p>在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 <strong>文章头部</strong></p><p>文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等</p><p>一个简单的示例如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">title: Title<br>date: YYYY-MM-DD HH:MM:SS<br>tags: [tag1, tag2, ...]<br>categories: category<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：属性和属性值之间必须有一个空格，否则会解析错误</p><h4 id="（3）首页显示"><a href="#（3）首页显示" class="headerlink" title="（3）首页显示"></a>（3）首页显示</h4><p>在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p><p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p><p>这时，我们只需在文章中使用 <code>&lt;!--more--&gt;</code> 标志即可，表示只会显示标志前面的内容</p><h3 id="四、部署发布"><a href="#四、部署发布" class="headerlink" title="四、部署发布"></a>四、部署发布</h3><p>在命令行，输入如下命令部署和发布文章</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">$ hexo g -d<br></code></pre></td></tr></table></figure><p><strong>建议</strong>：在使用 <code>hexo g</code> 部署之后，可以先使用 <code>hexo s</code> 运行本地站点，然后在浏览器输入地址 <a href="http://lacolhost:4000/">http://lacolhost:4000/</a> 查看运行结果，检查无误后再使用 <code>hexo d</code> 发布</p><p><strong>部署方式</strong>：有git部署方式，也可以使用<code>hexo g</code>运行后得到<code>public</code>目录后使用宝塔上传</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo入坑指南（一）</title>
    <link href="/4a17b156.html"/>
    <url>/4a17b156.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br>$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span> -p xxx/xxx/xxx.md<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生产静态文件"><a href="#生产静态文件" class="headerlink" title="生产静态文件"></a>生产静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署远程站点"><a href="#部署远程站点" class="headerlink" title="部署远程站点"></a>部署远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="壁纸与软件"><a href="#壁纸与软件" class="headerlink" title="壁纸与软件"></a>壁纸与软件</h3><p>1.<a href="http://www.netbian.com/">http://www.netbian.com/</a></p><p>2.picgo</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
